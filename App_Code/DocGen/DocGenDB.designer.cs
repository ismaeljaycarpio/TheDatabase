#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DocGen.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="thedatabase_dev_27-Jan-2016")]
	public partial class DocGenDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDataMap(DataMap instance);
    partial void UpdateDataMap(DataMap instance);
    partial void DeleteDataMap(DataMap instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertDocumentSectionType(DocumentSectionType instance);
    partial void UpdateDocumentSectionType(DocumentSectionType instance);
    partial void DeleteDocumentSectionType(DocumentSectionType instance);
    partial void InsertDocumentType(DocumentType instance);
    partial void UpdateDocumentType(DocumentType instance);
    partial void DeleteDocumentType(DocumentType instance);
    partial void InsertDocumentSectionStyle(DocumentSectionStyle instance);
    partial void UpdateDocumentSectionStyle(DocumentSectionStyle instance);
    partial void DeleteDocumentSectionStyle(DocumentSectionStyle instance);
    partial void InsertDocumentSection(DocumentSection instance);
    partial void UpdateDocumentSection(DocumentSection instance);
    partial void DeleteDocumentSection(DocumentSection instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertTable(Table instance);
    partial void UpdateTable(Table instance);
    partial void DeleteTable(Table instance);
    partial void InsertColumn(Column instance);
    partial void UpdateColumn(Column instance);
    partial void DeleteColumn(Column instance);
    #endregion
		
		public DocGenDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CnString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DocGenDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DocGenDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DocGenDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DocGenDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DataMap> DataMaps
		{
			get
			{
				return this.GetTable<DataMap>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<DocumentSectionType> DocumentSectionTypes
		{
			get
			{
				return this.GetTable<DocumentSectionType>();
			}
		}
		
		public System.Data.Linq.Table<DocumentType> DocumentTypes
		{
			get
			{
				return this.GetTable<DocumentType>();
			}
		}
		
		public System.Data.Linq.Table<DocumentSectionStyle> DocumentSectionStyles
		{
			get
			{
				return this.GetTable<DocumentSectionStyle>();
			}
		}
		
		public System.Data.Linq.Table<DocumentSection> DocumentSections
		{
			get
			{
				return this.GetTable<DocumentSection>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<Table> Tables
		{
			get
			{
				return this.GetTable<Table>();
			}
		}
		
		public System.Data.Linq.Table<Column> Columns
		{
			get
			{
				return this.GetTable<Column>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dgDataMap")]
	public partial class DataMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataMapID;
		
		private string _DisplayText;
		
		private string _StoredProcedureName;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private string _ReturnFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataMapIDChanging(int value);
    partial void OnDataMapIDChanged();
    partial void OnDisplayTextChanging(string value);
    partial void OnDisplayTextChanged();
    partial void OnStoredProcedureNameChanging(string value);
    partial void OnStoredProcedureNameChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnReturnFieldsChanging(string value);
    partial void OnReturnFieldsChanged();
    #endregion
		
		public DataMap()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataMapID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataMapID
		{
			get
			{
				return this._DataMapID;
			}
			set
			{
				if ((this._DataMapID != value))
				{
					this.OnDataMapIDChanging(value);
					this.SendPropertyChanging();
					this._DataMapID = value;
					this.SendPropertyChanged("DataMapID");
					this.OnDataMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayText", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string DisplayText
		{
			get
			{
				return this._DisplayText;
			}
			set
			{
				if ((this._DisplayText != value))
				{
					this.OnDisplayTextChanging(value);
					this.SendPropertyChanging();
					this._DisplayText = value;
					this.SendPropertyChanged("DisplayText");
					this.OnDisplayTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoredProcedureName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string StoredProcedureName
		{
			get
			{
				return this._StoredProcedureName;
			}
			set
			{
				if ((this._StoredProcedureName != value))
				{
					this.OnStoredProcedureNameChanging(value);
					this.SendPropertyChanging();
					this._StoredProcedureName = value;
					this.SendPropertyChanged("StoredProcedureName");
					this.OnStoredProcedureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnFields", DbType="VarChar(500)", CanBeNull=false)]
		public string ReturnFields
		{
			get
			{
				return this._ReturnFields;
			}
			set
			{
				if ((this._ReturnFields != value))
				{
					this.OnReturnFieldsChanging(value);
					this.SendPropertyChanging();
					this._ReturnFields = value;
					this.SendPropertyChanged("ReturnFields");
					this.OnReturnFieldsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private string _Password;
		
		private bool _IsActive;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _DateUpdated;
		
		private int _AccountID;
		
		private bool _IsAccountHolder;
		
		private bool _IsAdvancedSecurity;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Column> _Columns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnIsAccountHolderChanging(bool value);
    partial void OnIsAccountHolderChanged();
    partial void OnIsAdvancedSecurityChanging(bool value);
    partial void OnIsAdvancedSecurityChanged();
    #endregion
		
		public User()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Columns = new EntitySet<Column>(new Action<Column>(this.attach_Columns), new Action<Column>(this.detach_Columns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAccountHolder", DbType="Bit NOT NULL")]
		public bool IsAccountHolder
		{
			get
			{
				return this._IsAccountHolder;
			}
			set
			{
				if ((this._IsAccountHolder != value))
				{
					this.OnIsAccountHolderChanging(value);
					this.SendPropertyChanging();
					this._IsAccountHolder = value;
					this.SendPropertyChanged("IsAccountHolder");
					this.OnIsAccountHolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdvancedSecurity", DbType="Bit NOT NULL")]
		public bool IsAdvancedSecurity
		{
			get
			{
				return this._IsAdvancedSecurity;
			}
			set
			{
				if ((this._IsAdvancedSecurity != value))
				{
					this.OnIsAdvancedSecurityChanging(value);
					this.SendPropertyChanging();
					this._IsAdvancedSecurity = value;
					this.SendPropertyChanged("IsAdvancedSecurity");
					this.OnIsAdvancedSecurityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Document", Storage="_Documents", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Column", Storage="_Columns", ThisKey="UserID", OtherKey="LastUpdatedUserID")]
		public EntitySet<Column> Columns
		{
			get
			{
				return this._Columns;
			}
			set
			{
				this._Columns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentSectionType")]
	public partial class DocumentSectionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentSectionTypeID;
		
		private string _SectionType;
		
		private EntitySet<DocumentSection> _DocumentSections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentSectionTypeIDChanging(int value);
    partial void OnDocumentSectionTypeIDChanged();
    partial void OnSectionTypeChanging(string value);
    partial void OnSectionTypeChanged();
    #endregion
		
		public DocumentSectionType()
		{
			this._DocumentSections = new EntitySet<DocumentSection>(new Action<DocumentSection>(this.attach_DocumentSections), new Action<DocumentSection>(this.detach_DocumentSections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentSectionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentSectionTypeID
		{
			get
			{
				return this._DocumentSectionTypeID;
			}
			set
			{
				if ((this._DocumentSectionTypeID != value))
				{
					this.OnDocumentSectionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentSectionTypeID = value;
					this.SendPropertyChanged("DocumentSectionTypeID");
					this.OnDocumentSectionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionType", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SectionType
		{
			get
			{
				return this._SectionType;
			}
			set
			{
				if ((this._SectionType != value))
				{
					this.OnSectionTypeChanging(value);
					this.SendPropertyChanging();
					this._SectionType = value;
					this.SendPropertyChanged("SectionType");
					this.OnSectionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentSectionType_DocumentSection", Storage="_DocumentSections", ThisKey="DocumentSectionTypeID", OtherKey="DocumentSectionTypeID")]
		public EntitySet<DocumentSection> DocumentSections
		{
			get
			{
				return this._DocumentSections;
			}
			set
			{
				this._DocumentSections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentSections(DocumentSection entity)
		{
			this.SendPropertyChanging();
			entity.DocumentSectionType = this;
		}
		
		private void detach_DocumentSections(DocumentSection entity)
		{
			this.SendPropertyChanging();
			entity.DocumentSectionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentType")]
	public partial class DocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentTypeID;
		
		private string _DocumentTypeName;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _DateUpdated;
		
		private int _AccountID;
		
		private EntitySet<Document> _Documents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnDocumentTypeNameChanging(string value);
    partial void OnDocumentTypeNameChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    #endregion
		
		public DocumentType()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string DocumentTypeName
		{
			get
			{
				return this._DocumentTypeName;
			}
			set
			{
				if ((this._DocumentTypeName != value))
				{
					this.OnDocumentTypeNameChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeName = value;
					this.SendPropertyChanged("DocumentTypeName");
					this.OnDocumentTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_Document", Storage="_Documents", ThisKey="DocumentTypeID", OtherKey="DocumentTypeID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentSectionStyle")]
	public partial class DocumentSectionStyle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentSectionStyleID;
		
		private int _AccountID;
		
		private string _StyleName;
		
		private string _StyleDefinition;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _DateUpdated;
		
		private bool _IsSystem;
		
		private EntitySet<DocumentSection> _DocumentSections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentSectionStyleIDChanging(int value);
    partial void OnDocumentSectionStyleIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnStyleNameChanging(string value);
    partial void OnStyleNameChanged();
    partial void OnStyleDefinitionChanging(string value);
    partial void OnStyleDefinitionChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    partial void OnIsSystemChanging(bool value);
    partial void OnIsSystemChanged();
    #endregion
		
		public DocumentSectionStyle()
		{
			this._DocumentSections = new EntitySet<DocumentSection>(new Action<DocumentSection>(this.attach_DocumentSections), new Action<DocumentSection>(this.detach_DocumentSections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentSectionStyleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentSectionStyleID
		{
			get
			{
				return this._DocumentSectionStyleID;
			}
			set
			{
				if ((this._DocumentSectionStyleID != value))
				{
					this.OnDocumentSectionStyleIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentSectionStyleID = value;
					this.SendPropertyChanged("DocumentSectionStyleID");
					this.OnDocumentSectionStyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StyleName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string StyleName
		{
			get
			{
				return this._StyleName;
			}
			set
			{
				if ((this._StyleName != value))
				{
					this.OnStyleNameChanging(value);
					this.SendPropertyChanging();
					this._StyleName = value;
					this.SendPropertyChanged("StyleName");
					this.OnStyleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StyleDefinition", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StyleDefinition
		{
			get
			{
				return this._StyleDefinition;
			}
			set
			{
				if ((this._StyleDefinition != value))
				{
					this.OnStyleDefinitionChanging(value);
					this.SendPropertyChanging();
					this._StyleDefinition = value;
					this.SendPropertyChanged("StyleDefinition");
					this.OnStyleDefinitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystem", DbType="Bit NOT NULL")]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentSectionStyle_DocumentSection", Storage="_DocumentSections", ThisKey="DocumentSectionStyleID", OtherKey="DocumentSectionStyleID")]
		public EntitySet<DocumentSection> DocumentSections
		{
			get
			{
				return this._DocumentSections;
			}
			set
			{
				this._DocumentSections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentSections(DocumentSection entity)
		{
			this.SendPropertyChanging();
			entity.DocumentSectionStyle = this;
		}
		
		private void detach_DocumentSections(DocumentSection entity)
		{
			this.SendPropertyChanging();
			entity.DocumentSectionStyle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentSection")]
	public partial class DocumentSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentSectionID;
		
		private int _DocumentID;
		
		private int _DocumentSectionTypeID;
		
		private int _Position;
		
		private string _SectionName;
		
		private string _Content;
		
		private string _Filter;
		
		private string _Details;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _DateUpdated;
		
		private System.Nullable<int> _DocumentSectionStyleID;
		
		private string _ValueFields;
		
		private System.Nullable<int> _ParentSectionID;
		
		private System.Nullable<int> _ColumnIndex;
		
		private EntityRef<DocumentSectionType> _DocumentSectionType;
		
		private EntityRef<DocumentSectionStyle> _DocumentSectionStyle;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentSectionIDChanging(int value);
    partial void OnDocumentSectionIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnDocumentSectionTypeIDChanging(int value);
    partial void OnDocumentSectionTypeIDChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnSectionNameChanging(string value);
    partial void OnSectionNameChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnFilterChanging(string value);
    partial void OnFilterChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    partial void OnDocumentSectionStyleIDChanging(System.Nullable<int> value);
    partial void OnDocumentSectionStyleIDChanged();
    partial void OnValueFieldsChanging(string value);
    partial void OnValueFieldsChanged();
    partial void OnParentSectionIDChanging(System.Nullable<int> value);
    partial void OnParentSectionIDChanged();
    partial void OnColumnIndexChanging(System.Nullable<int> value);
    partial void OnColumnIndexChanged();
    #endregion
		
		public DocumentSection()
		{
			this._DocumentSectionType = default(EntityRef<DocumentSectionType>);
			this._DocumentSectionStyle = default(EntityRef<DocumentSectionStyle>);
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentSectionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentSectionID
		{
			get
			{
				return this._DocumentSectionID;
			}
			set
			{
				if ((this._DocumentSectionID != value))
				{
					this.OnDocumentSectionIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentSectionID = value;
					this.SendPropertyChanged("DocumentSectionID");
					this.OnDocumentSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentSectionTypeID", DbType="Int NOT NULL")]
		public int DocumentSectionTypeID
		{
			get
			{
				return this._DocumentSectionTypeID;
			}
			set
			{
				if ((this._DocumentSectionTypeID != value))
				{
					if (this._DocumentSectionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentSectionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentSectionTypeID = value;
					this.SendPropertyChanged("DocumentSectionTypeID");
					this.OnDocumentSectionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionName", DbType="VarChar(100)")]
		public string SectionName
		{
			get
			{
				return this._SectionName;
			}
			set
			{
				if ((this._SectionName != value))
				{
					this.OnSectionNameChanging(value);
					this.SendPropertyChanging();
					this._SectionName = value;
					this.SendPropertyChanged("SectionName");
					this.OnSectionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="VarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filter", DbType="VarChar(MAX)")]
		public string Filter
		{
			get
			{
				return this._Filter;
			}
			set
			{
				if ((this._Filter != value))
				{
					this.OnFilterChanging(value);
					this.SendPropertyChanging();
					this._Filter = value;
					this.SendPropertyChanged("Filter");
					this.OnFilterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="VarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentSectionStyleID", DbType="Int")]
		public System.Nullable<int> DocumentSectionStyleID
		{
			get
			{
				return this._DocumentSectionStyleID;
			}
			set
			{
				if ((this._DocumentSectionStyleID != value))
				{
					if (this._DocumentSectionStyle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentSectionStyleIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentSectionStyleID = value;
					this.SendPropertyChanged("DocumentSectionStyleID");
					this.OnDocumentSectionStyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueFields", DbType="NVarChar(MAX)")]
		public string ValueFields
		{
			get
			{
				return this._ValueFields;
			}
			set
			{
				if ((this._ValueFields != value))
				{
					this.OnValueFieldsChanging(value);
					this.SendPropertyChanging();
					this._ValueFields = value;
					this.SendPropertyChanged("ValueFields");
					this.OnValueFieldsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentSectionID", DbType="Int")]
		public System.Nullable<int> ParentSectionID
		{
			get
			{
				return this._ParentSectionID;
			}
			set
			{
				if ((this._ParentSectionID != value))
				{
					this.OnParentSectionIDChanging(value);
					this.SendPropertyChanging();
					this._ParentSectionID = value;
					this.SendPropertyChanged("ParentSectionID");
					this.OnParentSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnIndex", DbType="Int")]
		public System.Nullable<int> ColumnIndex
		{
			get
			{
				return this._ColumnIndex;
			}
			set
			{
				if ((this._ColumnIndex != value))
				{
					this.OnColumnIndexChanging(value);
					this.SendPropertyChanging();
					this._ColumnIndex = value;
					this.SendPropertyChanged("ColumnIndex");
					this.OnColumnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentSectionType_DocumentSection", Storage="_DocumentSectionType", ThisKey="DocumentSectionTypeID", OtherKey="DocumentSectionTypeID", IsForeignKey=true)]
		public DocumentSectionType DocumentSectionType
		{
			get
			{
				return this._DocumentSectionType.Entity;
			}
			set
			{
				DocumentSectionType previousValue = this._DocumentSectionType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentSectionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentSectionType.Entity = null;
						previousValue.DocumentSections.Remove(this);
					}
					this._DocumentSectionType.Entity = value;
					if ((value != null))
					{
						value.DocumentSections.Add(this);
						this._DocumentSectionTypeID = value.DocumentSectionTypeID;
					}
					else
					{
						this._DocumentSectionTypeID = default(int);
					}
					this.SendPropertyChanged("DocumentSectionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentSectionStyle_DocumentSection", Storage="_DocumentSectionStyle", ThisKey="DocumentSectionStyleID", OtherKey="DocumentSectionStyleID", IsForeignKey=true)]
		public DocumentSectionStyle DocumentSectionStyle
		{
			get
			{
				return this._DocumentSectionStyle.Entity;
			}
			set
			{
				DocumentSectionStyle previousValue = this._DocumentSectionStyle.Entity;
				if (((previousValue != value) 
							|| (this._DocumentSectionStyle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentSectionStyle.Entity = null;
						previousValue.DocumentSections.Remove(this);
					}
					this._DocumentSectionStyle.Entity = value;
					if ((value != null))
					{
						value.DocumentSections.Add(this);
						this._DocumentSectionStyleID = value.DocumentSectionStyleID;
					}
					else
					{
						this._DocumentSectionStyleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DocumentSectionStyle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentSection", Storage="_Document", ThisKey="DocumentID", OtherKey="DocumentID", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentSections.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentSections.Add(this);
						this._DocumentID = value.DocumentID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentID;
		
		private int _AccountID;
		
		private string _DocumentText;
		
		private System.Nullable<int> _DocumentTypeID;
		
		private string _UniqueName;
		
		private string _FileTitle;
		
		private System.Nullable<System.DateTime> _DocumentDate;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _DateUpdated;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _TableID;
		
		private string _ReportHTML;
		
		private bool _IsReportPublic;
		
		private string _DocumentDescription;
		
		private System.Nullable<System.DateTime> _DocumentEndDate;
		
		private System.Nullable<bool> _ForDashBoard;
		
		private System.Nullable<int> _FolderID;
		
		private System.Nullable<decimal> _Size;
		
		private string _ReportType;
		
		private EntitySet<DocumentSection> _DocumentSections;
		
		private EntityRef<DocumentType> _DocumentType;
		
		private EntityRef<User> _User;
		
		private EntityRef<Table> _Table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnDocumentTextChanging(string value);
    partial void OnDocumentTextChanged();
    partial void OnDocumentTypeIDChanging(System.Nullable<int> value);
    partial void OnDocumentTypeIDChanged();
    partial void OnUniqueNameChanging(string value);
    partial void OnUniqueNameChanged();
    partial void OnFileTitleChanging(string value);
    partial void OnFileTitleChanged();
    partial void OnDocumentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocumentDateChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnTableIDChanging(System.Nullable<int> value);
    partial void OnTableIDChanged();
    partial void OnReportHTMLChanging(string value);
    partial void OnReportHTMLChanged();
    partial void OnIsReportPublicChanging(bool value);
    partial void OnIsReportPublicChanged();
    partial void OnDocumentDescriptionChanging(string value);
    partial void OnDocumentDescriptionChanged();
    partial void OnDocumentEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocumentEndDateChanged();
    partial void OnForDashBoardChanging(System.Nullable<bool> value);
    partial void OnForDashBoardChanged();
    partial void OnFolderIDChanging(System.Nullable<int> value);
    partial void OnFolderIDChanged();
    partial void OnSizeChanging(System.Nullable<decimal> value);
    partial void OnSizeChanged();
    partial void OnReportTypeChanging(string value);
    partial void OnReportTypeChanged();
    #endregion
		
		public Document()
		{
			this._DocumentSections = new EntitySet<DocumentSection>(new Action<DocumentSection>(this.attach_DocumentSections), new Action<DocumentSection>(this.detach_DocumentSections));
			this._DocumentType = default(EntityRef<DocumentType>);
			this._User = default(EntityRef<User>);
			this._Table = default(EntityRef<Table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentText", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string DocumentText
		{
			get
			{
				return this._DocumentText;
			}
			set
			{
				if ((this._DocumentText != value))
				{
					this.OnDocumentTextChanging(value);
					this.SendPropertyChanging();
					this._DocumentText = value;
					this.SendPropertyChanged("DocumentText");
					this.OnDocumentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeID", DbType="Int")]
		public System.Nullable<int> DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string UniqueName
		{
			get
			{
				return this._UniqueName;
			}
			set
			{
				if ((this._UniqueName != value))
				{
					this.OnUniqueNameChanging(value);
					this.SendPropertyChanging();
					this._UniqueName = value;
					this.SendPropertyChanged("UniqueName");
					this.OnUniqueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FileTitle
		{
			get
			{
				return this._FileTitle;
			}
			set
			{
				if ((this._FileTitle != value))
				{
					this.OnFileTitleChanging(value);
					this.SendPropertyChanging();
					this._FileTitle = value;
					this.SendPropertyChanged("FileTitle");
					this.OnFileTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DocumentDate
		{
			get
			{
				return this._DocumentDate;
			}
			set
			{
				if ((this._DocumentDate != value))
				{
					this.OnDocumentDateChanging(value);
					this.SendPropertyChanging();
					this._DocumentDate = value;
					this.SendPropertyChanged("DocumentDate");
					this.OnDocumentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", DbType="Int")]
		public System.Nullable<int> TableID
		{
			get
			{
				return this._TableID;
			}
			set
			{
				if ((this._TableID != value))
				{
					if (this._Table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportHTML", DbType="VarChar(MAX)")]
		public string ReportHTML
		{
			get
			{
				return this._ReportHTML;
			}
			set
			{
				if ((this._ReportHTML != value))
				{
					this.OnReportHTMLChanging(value);
					this.SendPropertyChanging();
					this._ReportHTML = value;
					this.SendPropertyChanged("ReportHTML");
					this.OnReportHTMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReportPublic", DbType="Bit NOT NULL")]
		public bool IsReportPublic
		{
			get
			{
				return this._IsReportPublic;
			}
			set
			{
				if ((this._IsReportPublic != value))
				{
					this.OnIsReportPublicChanging(value);
					this.SendPropertyChanging();
					this._IsReportPublic = value;
					this.SendPropertyChanged("IsReportPublic");
					this.OnIsReportPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentDescription", DbType="VarChar(MAX)")]
		public string DocumentDescription
		{
			get
			{
				return this._DocumentDescription;
			}
			set
			{
				if ((this._DocumentDescription != value))
				{
					this.OnDocumentDescriptionChanging(value);
					this.SendPropertyChanging();
					this._DocumentDescription = value;
					this.SendPropertyChanged("DocumentDescription");
					this.OnDocumentDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DocumentEndDate
		{
			get
			{
				return this._DocumentEndDate;
			}
			set
			{
				if ((this._DocumentEndDate != value))
				{
					this.OnDocumentEndDateChanging(value);
					this.SendPropertyChanging();
					this._DocumentEndDate = value;
					this.SendPropertyChanged("DocumentEndDate");
					this.OnDocumentEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForDashBoard", DbType="Bit")]
		public System.Nullable<bool> ForDashBoard
		{
			get
			{
				return this._ForDashBoard;
			}
			set
			{
				if ((this._ForDashBoard != value))
				{
					this.OnForDashBoardChanging(value);
					this.SendPropertyChanging();
					this._ForDashBoard = value;
					this.SendPropertyChanged("ForDashBoard");
					this.OnForDashBoardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FolderID", DbType="Int")]
		public System.Nullable<int> FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Decimal(18,10)")]
		public System.Nullable<decimal> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportType", DbType="VarChar(25)")]
		public string ReportType
		{
			get
			{
				return this._ReportType;
			}
			set
			{
				if ((this._ReportType != value))
				{
					this.OnReportTypeChanging(value);
					this.SendPropertyChanging();
					this._ReportType = value;
					this.SendPropertyChanged("ReportType");
					this.OnReportTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentSection", Storage="_DocumentSections", ThisKey="DocumentID", OtherKey="DocumentID")]
		public EntitySet<DocumentSection> DocumentSections
		{
			get
			{
				return this._DocumentSections;
			}
			set
			{
				this._DocumentSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_Document", Storage="_DocumentType", ThisKey="DocumentTypeID", OtherKey="DocumentTypeID", IsForeignKey=true)]
		public DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._DocumentTypeID = value.DocumentTypeID;
					}
					else
					{
						this._DocumentTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Document", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Document", Storage="_Table", ThisKey="TableID", OtherKey="TableID", IsForeignKey=true)]
		public Table Table
		{
			get
			{
				return this._Table.Entity;
			}
			set
			{
				Table previousValue = this._Table.Entity;
				if (((previousValue != value) 
							|| (this._Table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Table.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._TableID = value.TableID;
					}
					else
					{
						this._TableID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentSections(DocumentSection entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentSections(DocumentSection entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Table]")]
	public partial class Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableID;
		
		private string _TableName;
		
		private System.Nullable<int> _MenuID_NO;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _DateUpdated;
		
		private bool _IsImportPositional_DELETED;
		
		private bool _IsActive;
		
		private int _AccountID;
		
		private string _PinImage;
		
		private System.Nullable<decimal> _MaxTimeBetweenRecords;
		
		private string _MaxTimeBetweenRecordsUnit;
		
		private System.Nullable<int> _LastUpdatedUserID;
		
		private System.Nullable<int> _LateDataDays;
		
		private System.Nullable<int> _ImportDataStartRow_DELETED;
		
		private string _DateFormat;
		
		private System.Nullable<int> _DisplayOrder;
		
		private bool _IsRecordDateUnique_DELETED;
		
		private System.Nullable<bool> _FlashAlerts;
		
		private System.Nullable<int> _FilterColumnID;
		
		private string _FilterDefaultValue;
		
		private string _ReasonChangeType;
		
		private string _ChangeHistoryType;
		
		private System.Nullable<bool> _AddWithoutLogin;
		
		private System.Nullable<int> _ParentTableID;
		
		private System.Nullable<bool> _AddUserRecord;
		
		private System.Nullable<int> _AddUserUserColumnID;
		
		private System.Nullable<int> _AddUserPasswordColumnID;
		
		private System.Nullable<bool> _AddUserNotification;
		
		private System.Nullable<int> _ImportColumnHeaderRow_DELETED;
		
		private System.Nullable<int> _SortColumnID;
		
		private string _HeaderName;
		
		private System.Nullable<bool> _HideAdvancedOption;
		
		private System.Nullable<int> _ValidateColumnID1;
		
		private System.Nullable<int> _ValidateColumnID2;
		
		private string _HeaderColor;
		
		private string _JSONAttachmentPOP3;
		
		private string _JSONAttachmentInfo;
		
		private System.Nullable<bool> _ShowTabVertically;
		
		private System.Nullable<bool> _CopyToChildrenAfterImport;
		
		private string _CustomUploadSheet;
		
		private string _FilterType;
		
		private string _TabColour;
		
		private string _TabTextColour;
		
		private System.Nullable<bool> _BoxAroundField;
		
		private string _FilterTopColour;
		
		private string _FilterBottomColour;
		
		private System.Nullable<bool> _ShowEditAfterAdd;
		
		private System.Nullable<bool> _AddOpensForm;
		
		private string _AddRecordSP;
		
		private string _SPSaveRecord;
		
		private System.Nullable<bool> _HideFilter;
		
		private System.Nullable<bool> _SaveAndAdd;
		
		private bool _NavigationArrows;
		
		private System.Nullable<int> _GraphXAxisColumnID;
		
		private System.Nullable<int> _GraphSeriesColumnID;
		
		private System.Nullable<int> _GraphDefaultPeriod;
		
		private System.Nullable<int> _DataUpdateUniqueColumnID;
		
		private System.Nullable<bool> _AllowCopyRecords;
		
		private string _SPSendEmail;
		
		private string _SPUpdateConfirm;
		
		private System.Nullable<bool> _ShowSentEmails;
		
		private System.Nullable<bool> _ShowReceivedEmails;
		
		private System.Nullable<int> _UniqueColumnID;
		
		private System.Nullable<int> _UniqueColumnID2;
		
		private string _SPAfterImport_DELETED;
		
		private System.Nullable<int> _PinDisplayOrder;
		
		private string _GraphOnStart;
		
		private System.Nullable<int> _GraphDefaultYAxisColumnID;
		
		private string _SummaryPageContent;
		
		private System.Nullable<bool> _IsDataUpdateAllowed;
		
		private System.Nullable<int> _DefaultImportTemplateID;
		
		private System.Nullable<bool> _NavigationArrows_BU;
		
		private string _DuplicateRecordAction;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Table> _Tables;
		
		private EntitySet<Column> _Columns;
		
		private EntitySet<Column> _Columns1;
		
		private EntityRef<Table> _Table1;
		
		private EntityRef<Column> _Column;
		
		private EntityRef<Column> _Column1;
		
		private EntityRef<Column> _Column2;
		
		private EntityRef<Column> _Column3;
		
		private EntityRef<Column> _Column4;
		
		private EntityRef<Column> _Column5;
		
		private EntityRef<Column> _Column6;
		
		private EntityRef<Column> _Column7;
		
		private EntityRef<Column> _Column8;
		
		private EntityRef<Column> _Column9;
		
		private EntityRef<Column> _Column10;
		
		private EntityRef<Column> _Column11;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnMenuID_NOChanging(System.Nullable<int> value);
    partial void OnMenuID_NOChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    partial void OnIsImportPositional_DELETEDChanging(bool value);
    partial void OnIsImportPositional_DELETEDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnPinImageChanging(string value);
    partial void OnPinImageChanged();
    partial void OnMaxTimeBetweenRecordsChanging(System.Nullable<decimal> value);
    partial void OnMaxTimeBetweenRecordsChanged();
    partial void OnMaxTimeBetweenRecordsUnitChanging(string value);
    partial void OnMaxTimeBetweenRecordsUnitChanged();
    partial void OnLastUpdatedUserIDChanging(System.Nullable<int> value);
    partial void OnLastUpdatedUserIDChanged();
    partial void OnLateDataDaysChanging(System.Nullable<int> value);
    partial void OnLateDataDaysChanged();
    partial void OnImportDataStartRow_DELETEDChanging(System.Nullable<int> value);
    partial void OnImportDataStartRow_DELETEDChanged();
    partial void OnDateFormatChanging(string value);
    partial void OnDateFormatChanged();
    partial void OnDisplayOrderChanging(System.Nullable<int> value);
    partial void OnDisplayOrderChanged();
    partial void OnIsRecordDateUnique_DELETEDChanging(bool value);
    partial void OnIsRecordDateUnique_DELETEDChanged();
    partial void OnFlashAlertsChanging(System.Nullable<bool> value);
    partial void OnFlashAlertsChanged();
    partial void OnFilterColumnIDChanging(System.Nullable<int> value);
    partial void OnFilterColumnIDChanged();
    partial void OnFilterDefaultValueChanging(string value);
    partial void OnFilterDefaultValueChanged();
    partial void OnReasonChangeTypeChanging(string value);
    partial void OnReasonChangeTypeChanged();
    partial void OnChangeHistoryTypeChanging(string value);
    partial void OnChangeHistoryTypeChanged();
    partial void OnAddWithoutLoginChanging(System.Nullable<bool> value);
    partial void OnAddWithoutLoginChanged();
    partial void OnParentTableIDChanging(System.Nullable<int> value);
    partial void OnParentTableIDChanged();
    partial void OnAddUserRecordChanging(System.Nullable<bool> value);
    partial void OnAddUserRecordChanged();
    partial void OnAddUserUserColumnIDChanging(System.Nullable<int> value);
    partial void OnAddUserUserColumnIDChanged();
    partial void OnAddUserPasswordColumnIDChanging(System.Nullable<int> value);
    partial void OnAddUserPasswordColumnIDChanged();
    partial void OnAddUserNotificationChanging(System.Nullable<bool> value);
    partial void OnAddUserNotificationChanged();
    partial void OnImportColumnHeaderRow_DELETEDChanging(System.Nullable<int> value);
    partial void OnImportColumnHeaderRow_DELETEDChanged();
    partial void OnSortColumnIDChanging(System.Nullable<int> value);
    partial void OnSortColumnIDChanged();
    partial void OnHeaderNameChanging(string value);
    partial void OnHeaderNameChanged();
    partial void OnHideAdvancedOptionChanging(System.Nullable<bool> value);
    partial void OnHideAdvancedOptionChanged();
    partial void OnValidateColumnID1Changing(System.Nullable<int> value);
    partial void OnValidateColumnID1Changed();
    partial void OnValidateColumnID2Changing(System.Nullable<int> value);
    partial void OnValidateColumnID2Changed();
    partial void OnHeaderColorChanging(string value);
    partial void OnHeaderColorChanged();
    partial void OnJSONAttachmentPOP3Changing(string value);
    partial void OnJSONAttachmentPOP3Changed();
    partial void OnJSONAttachmentInfoChanging(string value);
    partial void OnJSONAttachmentInfoChanged();
    partial void OnShowTabVerticallyChanging(System.Nullable<bool> value);
    partial void OnShowTabVerticallyChanged();
    partial void OnCopyToChildrenAfterImportChanging(System.Nullable<bool> value);
    partial void OnCopyToChildrenAfterImportChanged();
    partial void OnCustomUploadSheetChanging(string value);
    partial void OnCustomUploadSheetChanged();
    partial void OnFilterTypeChanging(string value);
    partial void OnFilterTypeChanged();
    partial void OnTabColourChanging(string value);
    partial void OnTabColourChanged();
    partial void OnTabTextColourChanging(string value);
    partial void OnTabTextColourChanged();
    partial void OnBoxAroundFieldChanging(System.Nullable<bool> value);
    partial void OnBoxAroundFieldChanged();
    partial void OnFilterTopColourChanging(string value);
    partial void OnFilterTopColourChanged();
    partial void OnFilterBottomColourChanging(string value);
    partial void OnFilterBottomColourChanged();
    partial void OnShowEditAfterAddChanging(System.Nullable<bool> value);
    partial void OnShowEditAfterAddChanged();
    partial void OnAddOpensFormChanging(System.Nullable<bool> value);
    partial void OnAddOpensFormChanged();
    partial void OnAddRecordSPChanging(string value);
    partial void OnAddRecordSPChanged();
    partial void OnSPSaveRecordChanging(string value);
    partial void OnSPSaveRecordChanged();
    partial void OnHideFilterChanging(System.Nullable<bool> value);
    partial void OnHideFilterChanged();
    partial void OnSaveAndAddChanging(System.Nullable<bool> value);
    partial void OnSaveAndAddChanged();
    partial void OnNavigationArrowsChanging(bool value);
    partial void OnNavigationArrowsChanged();
    partial void OnGraphXAxisColumnIDChanging(System.Nullable<int> value);
    partial void OnGraphXAxisColumnIDChanged();
    partial void OnGraphSeriesColumnIDChanging(System.Nullable<int> value);
    partial void OnGraphSeriesColumnIDChanged();
    partial void OnGraphDefaultPeriodChanging(System.Nullable<int> value);
    partial void OnGraphDefaultPeriodChanged();
    partial void OnDataUpdateUniqueColumnIDChanging(System.Nullable<int> value);
    partial void OnDataUpdateUniqueColumnIDChanged();
    partial void OnAllowCopyRecordsChanging(System.Nullable<bool> value);
    partial void OnAllowCopyRecordsChanged();
    partial void OnSPSendEmailChanging(string value);
    partial void OnSPSendEmailChanged();
    partial void OnSPUpdateConfirmChanging(string value);
    partial void OnSPUpdateConfirmChanged();
    partial void OnShowSentEmailsChanging(System.Nullable<bool> value);
    partial void OnShowSentEmailsChanged();
    partial void OnShowReceivedEmailsChanging(System.Nullable<bool> value);
    partial void OnShowReceivedEmailsChanged();
    partial void OnUniqueColumnIDChanging(System.Nullable<int> value);
    partial void OnUniqueColumnIDChanged();
    partial void OnUniqueColumnID2Changing(System.Nullable<int> value);
    partial void OnUniqueColumnID2Changed();
    partial void OnSPAfterImport_DELETEDChanging(string value);
    partial void OnSPAfterImport_DELETEDChanged();
    partial void OnPinDisplayOrderChanging(System.Nullable<int> value);
    partial void OnPinDisplayOrderChanged();
    partial void OnGraphOnStartChanging(string value);
    partial void OnGraphOnStartChanged();
    partial void OnGraphDefaultYAxisColumnIDChanging(System.Nullable<int> value);
    partial void OnGraphDefaultYAxisColumnIDChanged();
    partial void OnSummaryPageContentChanging(string value);
    partial void OnSummaryPageContentChanged();
    partial void OnIsDataUpdateAllowedChanging(System.Nullable<bool> value);
    partial void OnIsDataUpdateAllowedChanged();
    partial void OnDefaultImportTemplateIDChanging(System.Nullable<int> value);
    partial void OnDefaultImportTemplateIDChanged();
    partial void OnNavigationArrows_BUChanging(System.Nullable<bool> value);
    partial void OnNavigationArrows_BUChanged();
    partial void OnDuplicateRecordActionChanging(string value);
    partial void OnDuplicateRecordActionChanged();
    #endregion
		
		public Table()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Tables = new EntitySet<Table>(new Action<Table>(this.attach_Tables), new Action<Table>(this.detach_Tables));
			this._Columns = new EntitySet<Column>(new Action<Column>(this.attach_Columns), new Action<Column>(this.detach_Columns));
			this._Columns1 = new EntitySet<Column>(new Action<Column>(this.attach_Columns1), new Action<Column>(this.detach_Columns1));
			this._Table1 = default(EntityRef<Table>);
			this._Column = default(EntityRef<Column>);
			this._Column1 = default(EntityRef<Column>);
			this._Column2 = default(EntityRef<Column>);
			this._Column3 = default(EntityRef<Column>);
			this._Column4 = default(EntityRef<Column>);
			this._Column5 = default(EntityRef<Column>);
			this._Column6 = default(EntityRef<Column>);
			this._Column7 = default(EntityRef<Column>);
			this._Column8 = default(EntityRef<Column>);
			this._Column9 = default(EntityRef<Column>);
			this._Column10 = default(EntityRef<Column>);
			this._Column11 = default(EntityRef<Column>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TableID
		{
			get
			{
				return this._TableID;
			}
			set
			{
				if ((this._TableID != value))
				{
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuID_NO", DbType="Int")]
		public System.Nullable<int> MenuID_NO
		{
			get
			{
				return this._MenuID_NO;
			}
			set
			{
				if ((this._MenuID_NO != value))
				{
					this.OnMenuID_NOChanging(value);
					this.SendPropertyChanging();
					this._MenuID_NO = value;
					this.SendPropertyChanged("MenuID_NO");
					this.OnMenuID_NOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsImportPositional_DELETED", DbType="Bit NOT NULL")]
		public bool IsImportPositional_DELETED
		{
			get
			{
				return this._IsImportPositional_DELETED;
			}
			set
			{
				if ((this._IsImportPositional_DELETED != value))
				{
					this.OnIsImportPositional_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._IsImportPositional_DELETED = value;
					this.SendPropertyChanged("IsImportPositional_DELETED");
					this.OnIsImportPositional_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PinImage", DbType="VarChar(255)")]
		public string PinImage
		{
			get
			{
				return this._PinImage;
			}
			set
			{
				if ((this._PinImage != value))
				{
					this.OnPinImageChanging(value);
					this.SendPropertyChanging();
					this._PinImage = value;
					this.SendPropertyChanged("PinImage");
					this.OnPinImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxTimeBetweenRecords", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaxTimeBetweenRecords
		{
			get
			{
				return this._MaxTimeBetweenRecords;
			}
			set
			{
				if ((this._MaxTimeBetweenRecords != value))
				{
					this.OnMaxTimeBetweenRecordsChanging(value);
					this.SendPropertyChanging();
					this._MaxTimeBetweenRecords = value;
					this.SendPropertyChanged("MaxTimeBetweenRecords");
					this.OnMaxTimeBetweenRecordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxTimeBetweenRecordsUnit", DbType="VarChar(50)")]
		public string MaxTimeBetweenRecordsUnit
		{
			get
			{
				return this._MaxTimeBetweenRecordsUnit;
			}
			set
			{
				if ((this._MaxTimeBetweenRecordsUnit != value))
				{
					this.OnMaxTimeBetweenRecordsUnitChanging(value);
					this.SendPropertyChanging();
					this._MaxTimeBetweenRecordsUnit = value;
					this.SendPropertyChanged("MaxTimeBetweenRecordsUnit");
					this.OnMaxTimeBetweenRecordsUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedUserID", DbType="Int")]
		public System.Nullable<int> LastUpdatedUserID
		{
			get
			{
				return this._LastUpdatedUserID;
			}
			set
			{
				if ((this._LastUpdatedUserID != value))
				{
					this.OnLastUpdatedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedUserID = value;
					this.SendPropertyChanged("LastUpdatedUserID");
					this.OnLastUpdatedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LateDataDays", DbType="Int")]
		public System.Nullable<int> LateDataDays
		{
			get
			{
				return this._LateDataDays;
			}
			set
			{
				if ((this._LateDataDays != value))
				{
					this.OnLateDataDaysChanging(value);
					this.SendPropertyChanging();
					this._LateDataDays = value;
					this.SendPropertyChanged("LateDataDays");
					this.OnLateDataDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportDataStartRow_DELETED", DbType="Int")]
		public System.Nullable<int> ImportDataStartRow_DELETED
		{
			get
			{
				return this._ImportDataStartRow_DELETED;
			}
			set
			{
				if ((this._ImportDataStartRow_DELETED != value))
				{
					this.OnImportDataStartRow_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._ImportDataStartRow_DELETED = value;
					this.SendPropertyChanged("ImportDataStartRow_DELETED");
					this.OnImportDataStartRow_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFormat", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DateFormat
		{
			get
			{
				return this._DateFormat;
			}
			set
			{
				if ((this._DateFormat != value))
				{
					this.OnDateFormatChanging(value);
					this.SendPropertyChanging();
					this._DateFormat = value;
					this.SendPropertyChanged("DateFormat");
					this.OnDateFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int")]
		public System.Nullable<int> DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRecordDateUnique_DELETED", DbType="Bit NOT NULL")]
		public bool IsRecordDateUnique_DELETED
		{
			get
			{
				return this._IsRecordDateUnique_DELETED;
			}
			set
			{
				if ((this._IsRecordDateUnique_DELETED != value))
				{
					this.OnIsRecordDateUnique_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._IsRecordDateUnique_DELETED = value;
					this.SendPropertyChanged("IsRecordDateUnique_DELETED");
					this.OnIsRecordDateUnique_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlashAlerts", DbType="Bit")]
		public System.Nullable<bool> FlashAlerts
		{
			get
			{
				return this._FlashAlerts;
			}
			set
			{
				if ((this._FlashAlerts != value))
				{
					this.OnFlashAlertsChanging(value);
					this.SendPropertyChanging();
					this._FlashAlerts = value;
					this.SendPropertyChanged("FlashAlerts");
					this.OnFlashAlertsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterColumnID", DbType="Int")]
		public System.Nullable<int> FilterColumnID
		{
			get
			{
				return this._FilterColumnID;
			}
			set
			{
				if ((this._FilterColumnID != value))
				{
					if (this._Column.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFilterColumnIDChanging(value);
					this.SendPropertyChanging();
					this._FilterColumnID = value;
					this.SendPropertyChanged("FilterColumnID");
					this.OnFilterColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterDefaultValue", DbType="VarChar(50)")]
		public string FilterDefaultValue
		{
			get
			{
				return this._FilterDefaultValue;
			}
			set
			{
				if ((this._FilterDefaultValue != value))
				{
					this.OnFilterDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._FilterDefaultValue = value;
					this.SendPropertyChanged("FilterDefaultValue");
					this.OnFilterDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonChangeType", DbType="VarChar(20)")]
		public string ReasonChangeType
		{
			get
			{
				return this._ReasonChangeType;
			}
			set
			{
				if ((this._ReasonChangeType != value))
				{
					this.OnReasonChangeTypeChanging(value);
					this.SendPropertyChanging();
					this._ReasonChangeType = value;
					this.SendPropertyChanged("ReasonChangeType");
					this.OnReasonChangeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeHistoryType", DbType="VarChar(20)")]
		public string ChangeHistoryType
		{
			get
			{
				return this._ChangeHistoryType;
			}
			set
			{
				if ((this._ChangeHistoryType != value))
				{
					this.OnChangeHistoryTypeChanging(value);
					this.SendPropertyChanging();
					this._ChangeHistoryType = value;
					this.SendPropertyChanged("ChangeHistoryType");
					this.OnChangeHistoryTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddWithoutLogin", DbType="Bit")]
		public System.Nullable<bool> AddWithoutLogin
		{
			get
			{
				return this._AddWithoutLogin;
			}
			set
			{
				if ((this._AddWithoutLogin != value))
				{
					this.OnAddWithoutLoginChanging(value);
					this.SendPropertyChanging();
					this._AddWithoutLogin = value;
					this.SendPropertyChanged("AddWithoutLogin");
					this.OnAddWithoutLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentTableID", DbType="Int")]
		public System.Nullable<int> ParentTableID
		{
			get
			{
				return this._ParentTableID;
			}
			set
			{
				if ((this._ParentTableID != value))
				{
					if (this._Table1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentTableIDChanging(value);
					this.SendPropertyChanging();
					this._ParentTableID = value;
					this.SendPropertyChanged("ParentTableID");
					this.OnParentTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddUserRecord", DbType="Bit")]
		public System.Nullable<bool> AddUserRecord
		{
			get
			{
				return this._AddUserRecord;
			}
			set
			{
				if ((this._AddUserRecord != value))
				{
					this.OnAddUserRecordChanging(value);
					this.SendPropertyChanging();
					this._AddUserRecord = value;
					this.SendPropertyChanged("AddUserRecord");
					this.OnAddUserRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddUserUserColumnID", DbType="Int")]
		public System.Nullable<int> AddUserUserColumnID
		{
			get
			{
				return this._AddUserUserColumnID;
			}
			set
			{
				if ((this._AddUserUserColumnID != value))
				{
					if (this._Column1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddUserUserColumnIDChanging(value);
					this.SendPropertyChanging();
					this._AddUserUserColumnID = value;
					this.SendPropertyChanged("AddUserUserColumnID");
					this.OnAddUserUserColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddUserPasswordColumnID", DbType="Int")]
		public System.Nullable<int> AddUserPasswordColumnID
		{
			get
			{
				return this._AddUserPasswordColumnID;
			}
			set
			{
				if ((this._AddUserPasswordColumnID != value))
				{
					if (this._Column6.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddUserPasswordColumnIDChanging(value);
					this.SendPropertyChanging();
					this._AddUserPasswordColumnID = value;
					this.SendPropertyChanged("AddUserPasswordColumnID");
					this.OnAddUserPasswordColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddUserNotification", DbType="Bit")]
		public System.Nullable<bool> AddUserNotification
		{
			get
			{
				return this._AddUserNotification;
			}
			set
			{
				if ((this._AddUserNotification != value))
				{
					this.OnAddUserNotificationChanging(value);
					this.SendPropertyChanging();
					this._AddUserNotification = value;
					this.SendPropertyChanged("AddUserNotification");
					this.OnAddUserNotificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportColumnHeaderRow_DELETED", DbType="Int")]
		public System.Nullable<int> ImportColumnHeaderRow_DELETED
		{
			get
			{
				return this._ImportColumnHeaderRow_DELETED;
			}
			set
			{
				if ((this._ImportColumnHeaderRow_DELETED != value))
				{
					this.OnImportColumnHeaderRow_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._ImportColumnHeaderRow_DELETED = value;
					this.SendPropertyChanged("ImportColumnHeaderRow_DELETED");
					this.OnImportColumnHeaderRow_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortColumnID", DbType="Int")]
		public System.Nullable<int> SortColumnID
		{
			get
			{
				return this._SortColumnID;
			}
			set
			{
				if ((this._SortColumnID != value))
				{
					if (this._Column7.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSortColumnIDChanging(value);
					this.SendPropertyChanging();
					this._SortColumnID = value;
					this.SendPropertyChanged("SortColumnID");
					this.OnSortColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeaderName", DbType="VarChar(MAX)")]
		public string HeaderName
		{
			get
			{
				return this._HeaderName;
			}
			set
			{
				if ((this._HeaderName != value))
				{
					this.OnHeaderNameChanging(value);
					this.SendPropertyChanging();
					this._HeaderName = value;
					this.SendPropertyChanged("HeaderName");
					this.OnHeaderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HideAdvancedOption", DbType="Bit")]
		public System.Nullable<bool> HideAdvancedOption
		{
			get
			{
				return this._HideAdvancedOption;
			}
			set
			{
				if ((this._HideAdvancedOption != value))
				{
					this.OnHideAdvancedOptionChanging(value);
					this.SendPropertyChanging();
					this._HideAdvancedOption = value;
					this.SendPropertyChanged("HideAdvancedOption");
					this.OnHideAdvancedOptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidateColumnID1", DbType="Int")]
		public System.Nullable<int> ValidateColumnID1
		{
			get
			{
				return this._ValidateColumnID1;
			}
			set
			{
				if ((this._ValidateColumnID1 != value))
				{
					if (this._Column10.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValidateColumnID1Changing(value);
					this.SendPropertyChanging();
					this._ValidateColumnID1 = value;
					this.SendPropertyChanged("ValidateColumnID1");
					this.OnValidateColumnID1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidateColumnID2", DbType="Int")]
		public System.Nullable<int> ValidateColumnID2
		{
			get
			{
				return this._ValidateColumnID2;
			}
			set
			{
				if ((this._ValidateColumnID2 != value))
				{
					if (this._Column11.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValidateColumnID2Changing(value);
					this.SendPropertyChanging();
					this._ValidateColumnID2 = value;
					this.SendPropertyChanged("ValidateColumnID2");
					this.OnValidateColumnID2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeaderColor", DbType="VarChar(6)")]
		public string HeaderColor
		{
			get
			{
				return this._HeaderColor;
			}
			set
			{
				if ((this._HeaderColor != value))
				{
					this.OnHeaderColorChanging(value);
					this.SendPropertyChanging();
					this._HeaderColor = value;
					this.SendPropertyChanged("HeaderColor");
					this.OnHeaderColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JSONAttachmentPOP3", DbType="VarChar(MAX)")]
		public string JSONAttachmentPOP3
		{
			get
			{
				return this._JSONAttachmentPOP3;
			}
			set
			{
				if ((this._JSONAttachmentPOP3 != value))
				{
					this.OnJSONAttachmentPOP3Changing(value);
					this.SendPropertyChanging();
					this._JSONAttachmentPOP3 = value;
					this.SendPropertyChanged("JSONAttachmentPOP3");
					this.OnJSONAttachmentPOP3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JSONAttachmentInfo", DbType="VarChar(MAX)")]
		public string JSONAttachmentInfo
		{
			get
			{
				return this._JSONAttachmentInfo;
			}
			set
			{
				if ((this._JSONAttachmentInfo != value))
				{
					this.OnJSONAttachmentInfoChanging(value);
					this.SendPropertyChanging();
					this._JSONAttachmentInfo = value;
					this.SendPropertyChanged("JSONAttachmentInfo");
					this.OnJSONAttachmentInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowTabVertically", DbType="Bit")]
		public System.Nullable<bool> ShowTabVertically
		{
			get
			{
				return this._ShowTabVertically;
			}
			set
			{
				if ((this._ShowTabVertically != value))
				{
					this.OnShowTabVerticallyChanging(value);
					this.SendPropertyChanging();
					this._ShowTabVertically = value;
					this.SendPropertyChanged("ShowTabVertically");
					this.OnShowTabVerticallyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyToChildrenAfterImport", DbType="Bit")]
		public System.Nullable<bool> CopyToChildrenAfterImport
		{
			get
			{
				return this._CopyToChildrenAfterImport;
			}
			set
			{
				if ((this._CopyToChildrenAfterImport != value))
				{
					this.OnCopyToChildrenAfterImportChanging(value);
					this.SendPropertyChanging();
					this._CopyToChildrenAfterImport = value;
					this.SendPropertyChanged("CopyToChildrenAfterImport");
					this.OnCopyToChildrenAfterImportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomUploadSheet", DbType="VarChar(MAX)")]
		public string CustomUploadSheet
		{
			get
			{
				return this._CustomUploadSheet;
			}
			set
			{
				if ((this._CustomUploadSheet != value))
				{
					this.OnCustomUploadSheetChanging(value);
					this.SendPropertyChanging();
					this._CustomUploadSheet = value;
					this.SendPropertyChanged("CustomUploadSheet");
					this.OnCustomUploadSheetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterType", DbType="VarChar(25)")]
		public string FilterType
		{
			get
			{
				return this._FilterType;
			}
			set
			{
				if ((this._FilterType != value))
				{
					this.OnFilterTypeChanging(value);
					this.SendPropertyChanging();
					this._FilterType = value;
					this.SendPropertyChanged("FilterType");
					this.OnFilterTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TabColour", DbType="VarChar(6)")]
		public string TabColour
		{
			get
			{
				return this._TabColour;
			}
			set
			{
				if ((this._TabColour != value))
				{
					this.OnTabColourChanging(value);
					this.SendPropertyChanging();
					this._TabColour = value;
					this.SendPropertyChanged("TabColour");
					this.OnTabColourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TabTextColour", DbType="VarChar(6)")]
		public string TabTextColour
		{
			get
			{
				return this._TabTextColour;
			}
			set
			{
				if ((this._TabTextColour != value))
				{
					this.OnTabTextColourChanging(value);
					this.SendPropertyChanging();
					this._TabTextColour = value;
					this.SendPropertyChanged("TabTextColour");
					this.OnTabTextColourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxAroundField", DbType="Bit")]
		public System.Nullable<bool> BoxAroundField
		{
			get
			{
				return this._BoxAroundField;
			}
			set
			{
				if ((this._BoxAroundField != value))
				{
					this.OnBoxAroundFieldChanging(value);
					this.SendPropertyChanging();
					this._BoxAroundField = value;
					this.SendPropertyChanged("BoxAroundField");
					this.OnBoxAroundFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterTopColour", DbType="VarChar(6)")]
		public string FilterTopColour
		{
			get
			{
				return this._FilterTopColour;
			}
			set
			{
				if ((this._FilterTopColour != value))
				{
					this.OnFilterTopColourChanging(value);
					this.SendPropertyChanging();
					this._FilterTopColour = value;
					this.SendPropertyChanged("FilterTopColour");
					this.OnFilterTopColourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterBottomColour", DbType="VarChar(6)")]
		public string FilterBottomColour
		{
			get
			{
				return this._FilterBottomColour;
			}
			set
			{
				if ((this._FilterBottomColour != value))
				{
					this.OnFilterBottomColourChanging(value);
					this.SendPropertyChanging();
					this._FilterBottomColour = value;
					this.SendPropertyChanged("FilterBottomColour");
					this.OnFilterBottomColourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowEditAfterAdd", DbType="Bit")]
		public System.Nullable<bool> ShowEditAfterAdd
		{
			get
			{
				return this._ShowEditAfterAdd;
			}
			set
			{
				if ((this._ShowEditAfterAdd != value))
				{
					this.OnShowEditAfterAddChanging(value);
					this.SendPropertyChanging();
					this._ShowEditAfterAdd = value;
					this.SendPropertyChanged("ShowEditAfterAdd");
					this.OnShowEditAfterAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddOpensForm", DbType="Bit")]
		public System.Nullable<bool> AddOpensForm
		{
			get
			{
				return this._AddOpensForm;
			}
			set
			{
				if ((this._AddOpensForm != value))
				{
					this.OnAddOpensFormChanging(value);
					this.SendPropertyChanging();
					this._AddOpensForm = value;
					this.SendPropertyChanged("AddOpensForm");
					this.OnAddOpensFormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddRecordSP", DbType="VarChar(MAX)")]
		public string AddRecordSP
		{
			get
			{
				return this._AddRecordSP;
			}
			set
			{
				if ((this._AddRecordSP != value))
				{
					this.OnAddRecordSPChanging(value);
					this.SendPropertyChanging();
					this._AddRecordSP = value;
					this.SendPropertyChanged("AddRecordSP");
					this.OnAddRecordSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPSaveRecord", DbType="VarChar(200)")]
		public string SPSaveRecord
		{
			get
			{
				return this._SPSaveRecord;
			}
			set
			{
				if ((this._SPSaveRecord != value))
				{
					this.OnSPSaveRecordChanging(value);
					this.SendPropertyChanging();
					this._SPSaveRecord = value;
					this.SendPropertyChanged("SPSaveRecord");
					this.OnSPSaveRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HideFilter", DbType="Bit")]
		public System.Nullable<bool> HideFilter
		{
			get
			{
				return this._HideFilter;
			}
			set
			{
				if ((this._HideFilter != value))
				{
					this.OnHideFilterChanging(value);
					this.SendPropertyChanging();
					this._HideFilter = value;
					this.SendPropertyChanged("HideFilter");
					this.OnHideFilterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveAndAdd", DbType="Bit")]
		public System.Nullable<bool> SaveAndAdd
		{
			get
			{
				return this._SaveAndAdd;
			}
			set
			{
				if ((this._SaveAndAdd != value))
				{
					this.OnSaveAndAddChanging(value);
					this.SendPropertyChanging();
					this._SaveAndAdd = value;
					this.SendPropertyChanged("SaveAndAdd");
					this.OnSaveAndAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigationArrows", DbType="Bit NOT NULL")]
		public bool NavigationArrows
		{
			get
			{
				return this._NavigationArrows;
			}
			set
			{
				if ((this._NavigationArrows != value))
				{
					this.OnNavigationArrowsChanging(value);
					this.SendPropertyChanging();
					this._NavigationArrows = value;
					this.SendPropertyChanged("NavigationArrows");
					this.OnNavigationArrowsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraphXAxisColumnID", DbType="Int")]
		public System.Nullable<int> GraphXAxisColumnID
		{
			get
			{
				return this._GraphXAxisColumnID;
			}
			set
			{
				if ((this._GraphXAxisColumnID != value))
				{
					if (this._Column9.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGraphXAxisColumnIDChanging(value);
					this.SendPropertyChanging();
					this._GraphXAxisColumnID = value;
					this.SendPropertyChanged("GraphXAxisColumnID");
					this.OnGraphXAxisColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraphSeriesColumnID", DbType="Int")]
		public System.Nullable<int> GraphSeriesColumnID
		{
			get
			{
				return this._GraphSeriesColumnID;
			}
			set
			{
				if ((this._GraphSeriesColumnID != value))
				{
					if (this._Column8.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGraphSeriesColumnIDChanging(value);
					this.SendPropertyChanging();
					this._GraphSeriesColumnID = value;
					this.SendPropertyChanged("GraphSeriesColumnID");
					this.OnGraphSeriesColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraphDefaultPeriod", DbType="Int")]
		public System.Nullable<int> GraphDefaultPeriod
		{
			get
			{
				return this._GraphDefaultPeriod;
			}
			set
			{
				if ((this._GraphDefaultPeriod != value))
				{
					this.OnGraphDefaultPeriodChanging(value);
					this.SendPropertyChanging();
					this._GraphDefaultPeriod = value;
					this.SendPropertyChanged("GraphDefaultPeriod");
					this.OnGraphDefaultPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataUpdateUniqueColumnID", DbType="Int")]
		public System.Nullable<int> DataUpdateUniqueColumnID
		{
			get
			{
				return this._DataUpdateUniqueColumnID;
			}
			set
			{
				if ((this._DataUpdateUniqueColumnID != value))
				{
					if (this._Column2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataUpdateUniqueColumnIDChanging(value);
					this.SendPropertyChanging();
					this._DataUpdateUniqueColumnID = value;
					this.SendPropertyChanged("DataUpdateUniqueColumnID");
					this.OnDataUpdateUniqueColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowCopyRecords", DbType="Bit")]
		public System.Nullable<bool> AllowCopyRecords
		{
			get
			{
				return this._AllowCopyRecords;
			}
			set
			{
				if ((this._AllowCopyRecords != value))
				{
					this.OnAllowCopyRecordsChanging(value);
					this.SendPropertyChanging();
					this._AllowCopyRecords = value;
					this.SendPropertyChanged("AllowCopyRecords");
					this.OnAllowCopyRecordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPSendEmail", DbType="VarChar(200)")]
		public string SPSendEmail
		{
			get
			{
				return this._SPSendEmail;
			}
			set
			{
				if ((this._SPSendEmail != value))
				{
					this.OnSPSendEmailChanging(value);
					this.SendPropertyChanging();
					this._SPSendEmail = value;
					this.SendPropertyChanged("SPSendEmail");
					this.OnSPSendEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPUpdateConfirm", DbType="VarChar(256)")]
		public string SPUpdateConfirm
		{
			get
			{
				return this._SPUpdateConfirm;
			}
			set
			{
				if ((this._SPUpdateConfirm != value))
				{
					this.OnSPUpdateConfirmChanging(value);
					this.SendPropertyChanging();
					this._SPUpdateConfirm = value;
					this.SendPropertyChanged("SPUpdateConfirm");
					this.OnSPUpdateConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowSentEmails", DbType="Bit")]
		public System.Nullable<bool> ShowSentEmails
		{
			get
			{
				return this._ShowSentEmails;
			}
			set
			{
				if ((this._ShowSentEmails != value))
				{
					this.OnShowSentEmailsChanging(value);
					this.SendPropertyChanging();
					this._ShowSentEmails = value;
					this.SendPropertyChanged("ShowSentEmails");
					this.OnShowSentEmailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowReceivedEmails", DbType="Bit")]
		public System.Nullable<bool> ShowReceivedEmails
		{
			get
			{
				return this._ShowReceivedEmails;
			}
			set
			{
				if ((this._ShowReceivedEmails != value))
				{
					this.OnShowReceivedEmailsChanging(value);
					this.SendPropertyChanging();
					this._ShowReceivedEmails = value;
					this.SendPropertyChanged("ShowReceivedEmails");
					this.OnShowReceivedEmailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueColumnID", DbType="Int")]
		public System.Nullable<int> UniqueColumnID
		{
			get
			{
				return this._UniqueColumnID;
			}
			set
			{
				if ((this._UniqueColumnID != value))
				{
					if (this._Column4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUniqueColumnIDChanging(value);
					this.SendPropertyChanging();
					this._UniqueColumnID = value;
					this.SendPropertyChanged("UniqueColumnID");
					this.OnUniqueColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueColumnID2", DbType="Int")]
		public System.Nullable<int> UniqueColumnID2
		{
			get
			{
				return this._UniqueColumnID2;
			}
			set
			{
				if ((this._UniqueColumnID2 != value))
				{
					if (this._Column5.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUniqueColumnID2Changing(value);
					this.SendPropertyChanging();
					this._UniqueColumnID2 = value;
					this.SendPropertyChanged("UniqueColumnID2");
					this.OnUniqueColumnID2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPAfterImport_DELETED", DbType="VarChar(100)")]
		public string SPAfterImport_DELETED
		{
			get
			{
				return this._SPAfterImport_DELETED;
			}
			set
			{
				if ((this._SPAfterImport_DELETED != value))
				{
					this.OnSPAfterImport_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._SPAfterImport_DELETED = value;
					this.SendPropertyChanged("SPAfterImport_DELETED");
					this.OnSPAfterImport_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PinDisplayOrder", DbType="Int")]
		public System.Nullable<int> PinDisplayOrder
		{
			get
			{
				return this._PinDisplayOrder;
			}
			set
			{
				if ((this._PinDisplayOrder != value))
				{
					this.OnPinDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._PinDisplayOrder = value;
					this.SendPropertyChanged("PinDisplayOrder");
					this.OnPinDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraphOnStart", DbType="VarChar(25)")]
		public string GraphOnStart
		{
			get
			{
				return this._GraphOnStart;
			}
			set
			{
				if ((this._GraphOnStart != value))
				{
					this.OnGraphOnStartChanging(value);
					this.SendPropertyChanging();
					this._GraphOnStart = value;
					this.SendPropertyChanged("GraphOnStart");
					this.OnGraphOnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraphDefaultYAxisColumnID", DbType="Int")]
		public System.Nullable<int> GraphDefaultYAxisColumnID
		{
			get
			{
				return this._GraphDefaultYAxisColumnID;
			}
			set
			{
				if ((this._GraphDefaultYAxisColumnID != value))
				{
					if (this._Column3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGraphDefaultYAxisColumnIDChanging(value);
					this.SendPropertyChanging();
					this._GraphDefaultYAxisColumnID = value;
					this.SendPropertyChanged("GraphDefaultYAxisColumnID");
					this.OnGraphDefaultYAxisColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SummaryPageContent", DbType="VarChar(MAX)")]
		public string SummaryPageContent
		{
			get
			{
				return this._SummaryPageContent;
			}
			set
			{
				if ((this._SummaryPageContent != value))
				{
					this.OnSummaryPageContentChanging(value);
					this.SendPropertyChanging();
					this._SummaryPageContent = value;
					this.SendPropertyChanged("SummaryPageContent");
					this.OnSummaryPageContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDataUpdateAllowed", DbType="Bit")]
		public System.Nullable<bool> IsDataUpdateAllowed
		{
			get
			{
				return this._IsDataUpdateAllowed;
			}
			set
			{
				if ((this._IsDataUpdateAllowed != value))
				{
					this.OnIsDataUpdateAllowedChanging(value);
					this.SendPropertyChanging();
					this._IsDataUpdateAllowed = value;
					this.SendPropertyChanged("IsDataUpdateAllowed");
					this.OnIsDataUpdateAllowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultImportTemplateID", DbType="Int")]
		public System.Nullable<int> DefaultImportTemplateID
		{
			get
			{
				return this._DefaultImportTemplateID;
			}
			set
			{
				if ((this._DefaultImportTemplateID != value))
				{
					this.OnDefaultImportTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._DefaultImportTemplateID = value;
					this.SendPropertyChanged("DefaultImportTemplateID");
					this.OnDefaultImportTemplateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigationArrows_BU", DbType="Bit")]
		public System.Nullable<bool> NavigationArrows_BU
		{
			get
			{
				return this._NavigationArrows_BU;
			}
			set
			{
				if ((this._NavigationArrows_BU != value))
				{
					this.OnNavigationArrows_BUChanging(value);
					this.SendPropertyChanging();
					this._NavigationArrows_BU = value;
					this.SendPropertyChanged("NavigationArrows_BU");
					this.OnNavigationArrows_BUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DuplicateRecordAction", DbType="VarChar(50)")]
		public string DuplicateRecordAction
		{
			get
			{
				return this._DuplicateRecordAction;
			}
			set
			{
				if ((this._DuplicateRecordAction != value))
				{
					this.OnDuplicateRecordActionChanging(value);
					this.SendPropertyChanging();
					this._DuplicateRecordAction = value;
					this.SendPropertyChanged("DuplicateRecordAction");
					this.OnDuplicateRecordActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Document", Storage="_Documents", ThisKey="TableID", OtherKey="TableID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Table", Storage="_Tables", ThisKey="TableID", OtherKey="ParentTableID")]
		public EntitySet<Table> Tables
		{
			get
			{
				return this._Tables;
			}
			set
			{
				this._Tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Column", Storage="_Columns", ThisKey="TableID", OtherKey="TableID")]
		public EntitySet<Column> Columns
		{
			get
			{
				return this._Columns;
			}
			set
			{
				this._Columns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Column1", Storage="_Columns1", ThisKey="TableID", OtherKey="DefaultRelatedTableID")]
		public EntitySet<Column> Columns1
		{
			get
			{
				return this._Columns1;
			}
			set
			{
				this._Columns1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Table", Storage="_Table1", ThisKey="ParentTableID", OtherKey="TableID", IsForeignKey=true)]
		public Table Table1
		{
			get
			{
				return this._Table1.Entity;
			}
			set
			{
				Table previousValue = this._Table1.Entity;
				if (((previousValue != value) 
							|| (this._Table1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table1.Entity = null;
						previousValue.Tables.Remove(this);
					}
					this._Table1.Entity = value;
					if ((value != null))
					{
						value.Tables.Add(this);
						this._ParentTableID = value.TableID;
					}
					else
					{
						this._ParentTableID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Table1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table", Storage="_Column", ThisKey="FilterColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column
		{
			get
			{
				return this._Column.Entity;
			}
			set
			{
				Column previousValue = this._Column.Entity;
				if (((previousValue != value) 
							|| (this._Column.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column.Entity = null;
						previousValue.Tables.Remove(this);
					}
					this._Column.Entity = value;
					if ((value != null))
					{
						value.Tables.Add(this);
						this._FilterColumnID = value.ColumnID;
					}
					else
					{
						this._FilterColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table1", Storage="_Column1", ThisKey="AddUserUserColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column1
		{
			get
			{
				return this._Column1.Entity;
			}
			set
			{
				Column previousValue = this._Column1.Entity;
				if (((previousValue != value) 
							|| (this._Column1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column1.Entity = null;
						previousValue.Tables1.Remove(this);
					}
					this._Column1.Entity = value;
					if ((value != null))
					{
						value.Tables1.Add(this);
						this._AddUserUserColumnID = value.ColumnID;
					}
					else
					{
						this._AddUserUserColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table2", Storage="_Column2", ThisKey="DataUpdateUniqueColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column2
		{
			get
			{
				return this._Column2.Entity;
			}
			set
			{
				Column previousValue = this._Column2.Entity;
				if (((previousValue != value) 
							|| (this._Column2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column2.Entity = null;
						previousValue.Tables2.Remove(this);
					}
					this._Column2.Entity = value;
					if ((value != null))
					{
						value.Tables2.Add(this);
						this._DataUpdateUniqueColumnID = value.ColumnID;
					}
					else
					{
						this._DataUpdateUniqueColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table3", Storage="_Column3", ThisKey="GraphDefaultYAxisColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column3
		{
			get
			{
				return this._Column3.Entity;
			}
			set
			{
				Column previousValue = this._Column3.Entity;
				if (((previousValue != value) 
							|| (this._Column3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column3.Entity = null;
						previousValue.Tables3.Remove(this);
					}
					this._Column3.Entity = value;
					if ((value != null))
					{
						value.Tables3.Add(this);
						this._GraphDefaultYAxisColumnID = value.ColumnID;
					}
					else
					{
						this._GraphDefaultYAxisColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table4", Storage="_Column4", ThisKey="UniqueColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column4
		{
			get
			{
				return this._Column4.Entity;
			}
			set
			{
				Column previousValue = this._Column4.Entity;
				if (((previousValue != value) 
							|| (this._Column4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column4.Entity = null;
						previousValue.Tables4.Remove(this);
					}
					this._Column4.Entity = value;
					if ((value != null))
					{
						value.Tables4.Add(this);
						this._UniqueColumnID = value.ColumnID;
					}
					else
					{
						this._UniqueColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column4");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table5", Storage="_Column5", ThisKey="UniqueColumnID2", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column5
		{
			get
			{
				return this._Column5.Entity;
			}
			set
			{
				Column previousValue = this._Column5.Entity;
				if (((previousValue != value) 
							|| (this._Column5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column5.Entity = null;
						previousValue.Tables5.Remove(this);
					}
					this._Column5.Entity = value;
					if ((value != null))
					{
						value.Tables5.Add(this);
						this._UniqueColumnID2 = value.ColumnID;
					}
					else
					{
						this._UniqueColumnID2 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column5");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table6", Storage="_Column6", ThisKey="AddUserPasswordColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column6
		{
			get
			{
				return this._Column6.Entity;
			}
			set
			{
				Column previousValue = this._Column6.Entity;
				if (((previousValue != value) 
							|| (this._Column6.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column6.Entity = null;
						previousValue.Tables6.Remove(this);
					}
					this._Column6.Entity = value;
					if ((value != null))
					{
						value.Tables6.Add(this);
						this._AddUserPasswordColumnID = value.ColumnID;
					}
					else
					{
						this._AddUserPasswordColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column6");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table7", Storage="_Column7", ThisKey="SortColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column7
		{
			get
			{
				return this._Column7.Entity;
			}
			set
			{
				Column previousValue = this._Column7.Entity;
				if (((previousValue != value) 
							|| (this._Column7.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column7.Entity = null;
						previousValue.Tables7.Remove(this);
					}
					this._Column7.Entity = value;
					if ((value != null))
					{
						value.Tables7.Add(this);
						this._SortColumnID = value.ColumnID;
					}
					else
					{
						this._SortColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column7");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table8", Storage="_Column8", ThisKey="GraphSeriesColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column8
		{
			get
			{
				return this._Column8.Entity;
			}
			set
			{
				Column previousValue = this._Column8.Entity;
				if (((previousValue != value) 
							|| (this._Column8.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column8.Entity = null;
						previousValue.Tables8.Remove(this);
					}
					this._Column8.Entity = value;
					if ((value != null))
					{
						value.Tables8.Add(this);
						this._GraphSeriesColumnID = value.ColumnID;
					}
					else
					{
						this._GraphSeriesColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column8");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table9", Storage="_Column9", ThisKey="GraphXAxisColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column9
		{
			get
			{
				return this._Column9.Entity;
			}
			set
			{
				Column previousValue = this._Column9.Entity;
				if (((previousValue != value) 
							|| (this._Column9.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column9.Entity = null;
						previousValue.Tables9.Remove(this);
					}
					this._Column9.Entity = value;
					if ((value != null))
					{
						value.Tables9.Add(this);
						this._GraphXAxisColumnID = value.ColumnID;
					}
					else
					{
						this._GraphXAxisColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column9");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table10", Storage="_Column10", ThisKey="ValidateColumnID1", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column10
		{
			get
			{
				return this._Column10.Entity;
			}
			set
			{
				Column previousValue = this._Column10.Entity;
				if (((previousValue != value) 
							|| (this._Column10.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column10.Entity = null;
						previousValue.Tables10.Remove(this);
					}
					this._Column10.Entity = value;
					if ((value != null))
					{
						value.Tables10.Add(this);
						this._ValidateColumnID1 = value.ColumnID;
					}
					else
					{
						this._ValidateColumnID1 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column10");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table11", Storage="_Column11", ThisKey="ValidateColumnID2", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column11
		{
			get
			{
				return this._Column11.Entity;
			}
			set
			{
				Column previousValue = this._Column11.Entity;
				if (((previousValue != value) 
							|| (this._Column11.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column11.Entity = null;
						previousValue.Tables11.Remove(this);
					}
					this._Column11.Entity = value;
					if ((value != null))
					{
						value.Tables11.Add(this);
						this._ValidateColumnID2 = value.ColumnID;
					}
					else
					{
						this._ValidateColumnID2 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column11");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Table = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Table = null;
		}
		
		private void attach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.Table1 = this;
		}
		
		private void detach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.Table1 = null;
		}
		
		private void attach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.Table = this;
		}
		
		private void detach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.Table = null;
		}
		
		private void attach_Columns1(Column entity)
		{
			this.SendPropertyChanging();
			entity.Table1 = this;
		}
		
		private void detach_Columns1(Column entity)
		{
			this.SendPropertyChanging();
			entity.Table1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Column]")]
	public partial class Column : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ColumnID;
		
		private int _TableID;
		
		private string _SystemName;
		
		private string _DisplayName;
		
		private string _DisplayTextSummary;
		
		private string _DisplayTextDetail;
		
		private string _NameOnImport_DELETED;
		
		private string _NameOnExport_DELETED;
		
		private string _MobileName;
		
		private System.Nullable<int> _DisplayOrder;
		
		private bool _DisplayRight;
		
		private string _Alignment;
		
		private System.Nullable<int> _TextWidth;
		
		private System.Nullable<int> _TextHeight;
		
		private bool _IsStandard;
		
		private System.Nullable<int> _GraphTypeID;
		
		private string _GraphLabel;
		
		private string _ValidationOnWarning;
		
		private string _ValidationOnEntry;
		
		private bool _CheckUnlikelyValue;
		
		private System.Nullable<int> _PositionOnImport_DELETED;
		
		private string _Constant;
		
		private string _Calculation;
		
		private bool _ShowTotal;
		
		private bool _IgnoreSymbols;
		
		private bool _IsRound;
		
		private int _RoundNumber;
		
		private string _Notes;
		
		private string _DropdownValues;
		
		private System.Nullable<int> _NumberType;
		
		private string _DefaultValue;
		
		private System.Nullable<int> _AvgColumnID;
		
		private System.Nullable<int> _AvgNumberOfRecords;
		
		private bool _IsDateSingleColumn_DELETED;
		
		private System.Nullable<decimal> _ShowGraphExceedance;
		
		private System.Nullable<decimal> _ShowGraphWarning;
		
		private System.Nullable<int> _FlatLineNumber;
		
		private System.Nullable<decimal> _MaxValueAt;
		
		private string _ColumnType;
		
		private string _DropDownType;
		
		private System.Nullable<int> _TableTableID;
		
		private string _DisplayColumn;
		
		private string _SummaryCellBackColor;
		
		private System.Nullable<int> _FormVerticalPosition;
		
		private System.Nullable<int> _FormHorizontalPosition;
		
		private System.Nullable<int> _ParentColumnID;
		
		private string _TextType;
		
		private string _RegEx;
		
		private System.Nullable<int> _HideColumnID;
		
		private string _HideColumnValue;
		
		private string _DateCalculationType;
		
		private System.Nullable<int> _OnlyForAdmin;
		
		private bool _IsSystemColumn;
		
		private System.Nullable<int> _LinkedParentColumnID;
		
		private System.Nullable<int> _DataRetrieverID;
		
		private System.Nullable<bool> _VerticalList;
		
		private System.Nullable<bool> _SummarySearch;
		
		private System.Nullable<bool> _QuickAddLink;
		
		private string _HideOperator;
		
		private System.Nullable<bool> _CalculationIsActive;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _DateUpdated;
		
		private System.Nullable<int> _LastUpdatedUserID;
		
		private System.Nullable<int> _TableTabID;
		
		private string _ViewName;
		
		private string _SPDefaultValue;
		
		private string _DefaultType;
		
		private System.Nullable<int> _DefaultColumnID;
		
		private string _ShowViewLink;
		
		private System.Nullable<int> _FilterParentColumnID;
		
		private System.Nullable<int> _FilterOtherColumnID;
		
		private string _FilterValue;
		
		private System.Nullable<int> _MapPinHoverColumnID;
		
		private System.Nullable<int> _CompareColumnID;
		
		private string _CompareOperator;
		
		private string _MapPopup;
		
		private System.Nullable<int> _TrafficLightColumnID;
		
		private string _TrafficLightValues;
		
		private System.Nullable<int> _DefaultRelatedTableID;
		
		private System.Nullable<bool> _DefaultUpdateValues;
		
		private System.Nullable<bool> _ValidationCanIgnore;
		
		private System.Nullable<int> _DefaultGraphDefinitionID;
		
		private System.Nullable<bool> _ImageOnSummary;
		
		private System.Nullable<bool> _AllowCopy;
		
		private string _ValidationOnExceedance;
		
		private System.Nullable<bool> _ColourCells;
		
		private System.Nullable<int> _OldJoinColumn;
		
		private System.Nullable<int> _NewJoinColumn;
		
		private string _ButtonInfo;
		
		private string _FilterOperator;
		
		private System.Nullable<char> _Importance;
		
		private EntitySet<Table> _Tables;
		
		private EntitySet<Table> _Tables1;
		
		private EntitySet<Table> _Tables2;
		
		private EntitySet<Table> _Tables3;
		
		private EntitySet<Table> _Tables4;
		
		private EntitySet<Table> _Tables5;
		
		private EntitySet<Table> _Tables6;
		
		private EntitySet<Table> _Tables7;
		
		private EntitySet<Table> _Tables8;
		
		private EntitySet<Table> _Tables9;
		
		private EntitySet<Table> _Tables10;
		
		private EntitySet<Table> _Tables11;
		
		private EntitySet<Column> _Columns;
		
		private EntitySet<Column> _Columns1;
		
		private EntitySet<Column> _Columns2;
		
		private EntitySet<Column> _Columns3;
		
		private EntitySet<Column> _Columns4;
		
		private EntitySet<Column> _Columns5;
		
		private EntitySet<Column> _Columns6;
		
		private EntitySet<Column> _Columns7;
		
		private EntitySet<Column> _Columns8;
		
		private EntityRef<Column> _Column1;
		
		private EntityRef<Column> _Column2;
		
		private EntityRef<Column> _Column3;
		
		private EntityRef<Column> _Column4;
		
		private EntityRef<Column> _Column5;
		
		private EntityRef<Column> _Column6;
		
		private EntityRef<Column> _Column7;
		
		private EntityRef<Column> _Column8;
		
		private EntityRef<Column> _Column9;
		
		private EntityRef<Table> _Table;
		
		private EntityRef<Table> _Table1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColumnIDChanging(int value);
    partial void OnColumnIDChanged();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    partial void OnSystemNameChanging(string value);
    partial void OnSystemNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnDisplayTextSummaryChanging(string value);
    partial void OnDisplayTextSummaryChanged();
    partial void OnDisplayTextDetailChanging(string value);
    partial void OnDisplayTextDetailChanged();
    partial void OnNameOnImport_DELETEDChanging(string value);
    partial void OnNameOnImport_DELETEDChanged();
    partial void OnNameOnExport_DELETEDChanging(string value);
    partial void OnNameOnExport_DELETEDChanged();
    partial void OnMobileNameChanging(string value);
    partial void OnMobileNameChanged();
    partial void OnDisplayOrderChanging(System.Nullable<int> value);
    partial void OnDisplayOrderChanged();
    partial void OnDisplayRightChanging(bool value);
    partial void OnDisplayRightChanged();
    partial void OnAlignmentChanging(string value);
    partial void OnAlignmentChanged();
    partial void OnTextWidthChanging(System.Nullable<int> value);
    partial void OnTextWidthChanged();
    partial void OnTextHeightChanging(System.Nullable<int> value);
    partial void OnTextHeightChanged();
    partial void OnIsStandardChanging(bool value);
    partial void OnIsStandardChanged();
    partial void OnGraphTypeIDChanging(System.Nullable<int> value);
    partial void OnGraphTypeIDChanged();
    partial void OnGraphLabelChanging(string value);
    partial void OnGraphLabelChanged();
    partial void OnValidationOnWarningChanging(string value);
    partial void OnValidationOnWarningChanged();
    partial void OnValidationOnEntryChanging(string value);
    partial void OnValidationOnEntryChanged();
    partial void OnCheckUnlikelyValueChanging(bool value);
    partial void OnCheckUnlikelyValueChanged();
    partial void OnPositionOnImport_DELETEDChanging(System.Nullable<int> value);
    partial void OnPositionOnImport_DELETEDChanged();
    partial void OnConstantChanging(string value);
    partial void OnConstantChanged();
    partial void OnCalculationChanging(string value);
    partial void OnCalculationChanged();
    partial void OnShowTotalChanging(bool value);
    partial void OnShowTotalChanged();
    partial void OnIgnoreSymbolsChanging(bool value);
    partial void OnIgnoreSymbolsChanged();
    partial void OnIsRoundChanging(bool value);
    partial void OnIsRoundChanged();
    partial void OnRoundNumberChanging(int value);
    partial void OnRoundNumberChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnDropdownValuesChanging(string value);
    partial void OnDropdownValuesChanged();
    partial void OnNumberTypeChanging(System.Nullable<int> value);
    partial void OnNumberTypeChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnAvgColumnIDChanging(System.Nullable<int> value);
    partial void OnAvgColumnIDChanged();
    partial void OnAvgNumberOfRecordsChanging(System.Nullable<int> value);
    partial void OnAvgNumberOfRecordsChanged();
    partial void OnIsDateSingleColumn_DELETEDChanging(bool value);
    partial void OnIsDateSingleColumn_DELETEDChanged();
    partial void OnShowGraphExceedanceChanging(System.Nullable<decimal> value);
    partial void OnShowGraphExceedanceChanged();
    partial void OnShowGraphWarningChanging(System.Nullable<decimal> value);
    partial void OnShowGraphWarningChanged();
    partial void OnFlatLineNumberChanging(System.Nullable<int> value);
    partial void OnFlatLineNumberChanged();
    partial void OnMaxValueAtChanging(System.Nullable<decimal> value);
    partial void OnMaxValueAtChanged();
    partial void OnColumnTypeChanging(string value);
    partial void OnColumnTypeChanged();
    partial void OnDropDownTypeChanging(string value);
    partial void OnDropDownTypeChanged();
    partial void OnTableTableIDChanging(System.Nullable<int> value);
    partial void OnTableTableIDChanged();
    partial void OnDisplayColumnChanging(string value);
    partial void OnDisplayColumnChanged();
    partial void OnSummaryCellBackColorChanging(string value);
    partial void OnSummaryCellBackColorChanged();
    partial void OnFormVerticalPositionChanging(System.Nullable<int> value);
    partial void OnFormVerticalPositionChanged();
    partial void OnFormHorizontalPositionChanging(System.Nullable<int> value);
    partial void OnFormHorizontalPositionChanged();
    partial void OnParentColumnIDChanging(System.Nullable<int> value);
    partial void OnParentColumnIDChanged();
    partial void OnTextTypeChanging(string value);
    partial void OnTextTypeChanged();
    partial void OnRegExChanging(string value);
    partial void OnRegExChanged();
    partial void OnHideColumnIDChanging(System.Nullable<int> value);
    partial void OnHideColumnIDChanged();
    partial void OnHideColumnValueChanging(string value);
    partial void OnHideColumnValueChanged();
    partial void OnDateCalculationTypeChanging(string value);
    partial void OnDateCalculationTypeChanged();
    partial void OnOnlyForAdminChanging(System.Nullable<int> value);
    partial void OnOnlyForAdminChanged();
    partial void OnIsSystemColumnChanging(bool value);
    partial void OnIsSystemColumnChanged();
    partial void OnLinkedParentColumnIDChanging(System.Nullable<int> value);
    partial void OnLinkedParentColumnIDChanged();
    partial void OnDataRetrieverIDChanging(System.Nullable<int> value);
    partial void OnDataRetrieverIDChanged();
    partial void OnVerticalListChanging(System.Nullable<bool> value);
    partial void OnVerticalListChanged();
    partial void OnSummarySearchChanging(System.Nullable<bool> value);
    partial void OnSummarySearchChanged();
    partial void OnQuickAddLinkChanging(System.Nullable<bool> value);
    partial void OnQuickAddLinkChanged();
    partial void OnHideOperatorChanging(string value);
    partial void OnHideOperatorChanged();
    partial void OnCalculationIsActiveChanging(System.Nullable<bool> value);
    partial void OnCalculationIsActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    partial void OnLastUpdatedUserIDChanging(System.Nullable<int> value);
    partial void OnLastUpdatedUserIDChanged();
    partial void OnTableTabIDChanging(System.Nullable<int> value);
    partial void OnTableTabIDChanged();
    partial void OnViewNameChanging(string value);
    partial void OnViewNameChanged();
    partial void OnSPDefaultValueChanging(string value);
    partial void OnSPDefaultValueChanged();
    partial void OnDefaultTypeChanging(string value);
    partial void OnDefaultTypeChanged();
    partial void OnDefaultColumnIDChanging(System.Nullable<int> value);
    partial void OnDefaultColumnIDChanged();
    partial void OnShowViewLinkChanging(string value);
    partial void OnShowViewLinkChanged();
    partial void OnFilterParentColumnIDChanging(System.Nullable<int> value);
    partial void OnFilterParentColumnIDChanged();
    partial void OnFilterOtherColumnIDChanging(System.Nullable<int> value);
    partial void OnFilterOtherColumnIDChanged();
    partial void OnFilterValueChanging(string value);
    partial void OnFilterValueChanged();
    partial void OnMapPinHoverColumnIDChanging(System.Nullable<int> value);
    partial void OnMapPinHoverColumnIDChanged();
    partial void OnCompareColumnIDChanging(System.Nullable<int> value);
    partial void OnCompareColumnIDChanged();
    partial void OnCompareOperatorChanging(string value);
    partial void OnCompareOperatorChanged();
    partial void OnMapPopupChanging(string value);
    partial void OnMapPopupChanged();
    partial void OnTrafficLightColumnIDChanging(System.Nullable<int> value);
    partial void OnTrafficLightColumnIDChanged();
    partial void OnTrafficLightValuesChanging(string value);
    partial void OnTrafficLightValuesChanged();
    partial void OnDefaultRelatedTableIDChanging(System.Nullable<int> value);
    partial void OnDefaultRelatedTableIDChanged();
    partial void OnDefaultUpdateValuesChanging(System.Nullable<bool> value);
    partial void OnDefaultUpdateValuesChanged();
    partial void OnValidationCanIgnoreChanging(System.Nullable<bool> value);
    partial void OnValidationCanIgnoreChanged();
    partial void OnDefaultGraphDefinitionIDChanging(System.Nullable<int> value);
    partial void OnDefaultGraphDefinitionIDChanged();
    partial void OnImageOnSummaryChanging(System.Nullable<bool> value);
    partial void OnImageOnSummaryChanged();
    partial void OnAllowCopyChanging(System.Nullable<bool> value);
    partial void OnAllowCopyChanged();
    partial void OnValidationOnExceedanceChanging(string value);
    partial void OnValidationOnExceedanceChanged();
    partial void OnColourCellsChanging(System.Nullable<bool> value);
    partial void OnColourCellsChanged();
    partial void OnOldJoinColumnChanging(System.Nullable<int> value);
    partial void OnOldJoinColumnChanged();
    partial void OnNewJoinColumnChanging(System.Nullable<int> value);
    partial void OnNewJoinColumnChanged();
    partial void OnButtonInfoChanging(string value);
    partial void OnButtonInfoChanged();
    partial void OnFilterOperatorChanging(string value);
    partial void OnFilterOperatorChanged();
    partial void OnImportanceChanging(System.Nullable<char> value);
    partial void OnImportanceChanged();
    #endregion
		
		public Column()
		{
			this._Tables = new EntitySet<Table>(new Action<Table>(this.attach_Tables), new Action<Table>(this.detach_Tables));
			this._Tables1 = new EntitySet<Table>(new Action<Table>(this.attach_Tables1), new Action<Table>(this.detach_Tables1));
			this._Tables2 = new EntitySet<Table>(new Action<Table>(this.attach_Tables2), new Action<Table>(this.detach_Tables2));
			this._Tables3 = new EntitySet<Table>(new Action<Table>(this.attach_Tables3), new Action<Table>(this.detach_Tables3));
			this._Tables4 = new EntitySet<Table>(new Action<Table>(this.attach_Tables4), new Action<Table>(this.detach_Tables4));
			this._Tables5 = new EntitySet<Table>(new Action<Table>(this.attach_Tables5), new Action<Table>(this.detach_Tables5));
			this._Tables6 = new EntitySet<Table>(new Action<Table>(this.attach_Tables6), new Action<Table>(this.detach_Tables6));
			this._Tables7 = new EntitySet<Table>(new Action<Table>(this.attach_Tables7), new Action<Table>(this.detach_Tables7));
			this._Tables8 = new EntitySet<Table>(new Action<Table>(this.attach_Tables8), new Action<Table>(this.detach_Tables8));
			this._Tables9 = new EntitySet<Table>(new Action<Table>(this.attach_Tables9), new Action<Table>(this.detach_Tables9));
			this._Tables10 = new EntitySet<Table>(new Action<Table>(this.attach_Tables10), new Action<Table>(this.detach_Tables10));
			this._Tables11 = new EntitySet<Table>(new Action<Table>(this.attach_Tables11), new Action<Table>(this.detach_Tables11));
			this._Columns = new EntitySet<Column>(new Action<Column>(this.attach_Columns), new Action<Column>(this.detach_Columns));
			this._Columns1 = new EntitySet<Column>(new Action<Column>(this.attach_Columns1), new Action<Column>(this.detach_Columns1));
			this._Columns2 = new EntitySet<Column>(new Action<Column>(this.attach_Columns2), new Action<Column>(this.detach_Columns2));
			this._Columns3 = new EntitySet<Column>(new Action<Column>(this.attach_Columns3), new Action<Column>(this.detach_Columns3));
			this._Columns4 = new EntitySet<Column>(new Action<Column>(this.attach_Columns4), new Action<Column>(this.detach_Columns4));
			this._Columns5 = new EntitySet<Column>(new Action<Column>(this.attach_Columns5), new Action<Column>(this.detach_Columns5));
			this._Columns6 = new EntitySet<Column>(new Action<Column>(this.attach_Columns6), new Action<Column>(this.detach_Columns6));
			this._Columns7 = new EntitySet<Column>(new Action<Column>(this.attach_Columns7), new Action<Column>(this.detach_Columns7));
			this._Columns8 = new EntitySet<Column>(new Action<Column>(this.attach_Columns8), new Action<Column>(this.detach_Columns8));
			this._Column1 = default(EntityRef<Column>);
			this._Column2 = default(EntityRef<Column>);
			this._Column3 = default(EntityRef<Column>);
			this._Column4 = default(EntityRef<Column>);
			this._Column5 = default(EntityRef<Column>);
			this._Column6 = default(EntityRef<Column>);
			this._Column7 = default(EntityRef<Column>);
			this._Column8 = default(EntityRef<Column>);
			this._Column9 = default(EntityRef<Column>);
			this._Table = default(EntityRef<Table>);
			this._Table1 = default(EntityRef<Table>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ColumnID
		{
			get
			{
				return this._ColumnID;
			}
			set
			{
				if ((this._ColumnID != value))
				{
					this.OnColumnIDChanging(value);
					this.SendPropertyChanging();
					this._ColumnID = value;
					this.SendPropertyChanged("ColumnID");
					this.OnColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", DbType="Int NOT NULL")]
		public int TableID
		{
			get
			{
				return this._TableID;
			}
			set
			{
				if ((this._TableID != value))
				{
					if (this._Table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayTextSummary", DbType="VarChar(50)")]
		public string DisplayTextSummary
		{
			get
			{
				return this._DisplayTextSummary;
			}
			set
			{
				if ((this._DisplayTextSummary != value))
				{
					this.OnDisplayTextSummaryChanging(value);
					this.SendPropertyChanging();
					this._DisplayTextSummary = value;
					this.SendPropertyChanged("DisplayTextSummary");
					this.OnDisplayTextSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayTextDetail", DbType="VarChar(255)")]
		public string DisplayTextDetail
		{
			get
			{
				return this._DisplayTextDetail;
			}
			set
			{
				if ((this._DisplayTextDetail != value))
				{
					this.OnDisplayTextDetailChanging(value);
					this.SendPropertyChanging();
					this._DisplayTextDetail = value;
					this.SendPropertyChanged("DisplayTextDetail");
					this.OnDisplayTextDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOnImport_DELETED", DbType="VarChar(50)")]
		public string NameOnImport_DELETED
		{
			get
			{
				return this._NameOnImport_DELETED;
			}
			set
			{
				if ((this._NameOnImport_DELETED != value))
				{
					this.OnNameOnImport_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._NameOnImport_DELETED = value;
					this.SendPropertyChanged("NameOnImport_DELETED");
					this.OnNameOnImport_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOnExport_DELETED", DbType="VarChar(50)")]
		public string NameOnExport_DELETED
		{
			get
			{
				return this._NameOnExport_DELETED;
			}
			set
			{
				if ((this._NameOnExport_DELETED != value))
				{
					this.OnNameOnExport_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._NameOnExport_DELETED = value;
					this.SendPropertyChanged("NameOnExport_DELETED");
					this.OnNameOnExport_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileName", DbType="VarChar(50)")]
		public string MobileName
		{
			get
			{
				return this._MobileName;
			}
			set
			{
				if ((this._MobileName != value))
				{
					this.OnMobileNameChanging(value);
					this.SendPropertyChanging();
					this._MobileName = value;
					this.SendPropertyChanged("MobileName");
					this.OnMobileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int")]
		public System.Nullable<int> DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayRight", DbType="Bit NOT NULL")]
		public bool DisplayRight
		{
			get
			{
				return this._DisplayRight;
			}
			set
			{
				if ((this._DisplayRight != value))
				{
					this.OnDisplayRightChanging(value);
					this.SendPropertyChanging();
					this._DisplayRight = value;
					this.SendPropertyChanged("DisplayRight");
					this.OnDisplayRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alignment", DbType="VarChar(25)")]
		public string Alignment
		{
			get
			{
				return this._Alignment;
			}
			set
			{
				if ((this._Alignment != value))
				{
					this.OnAlignmentChanging(value);
					this.SendPropertyChanging();
					this._Alignment = value;
					this.SendPropertyChanged("Alignment");
					this.OnAlignmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextWidth", DbType="Int")]
		public System.Nullable<int> TextWidth
		{
			get
			{
				return this._TextWidth;
			}
			set
			{
				if ((this._TextWidth != value))
				{
					this.OnTextWidthChanging(value);
					this.SendPropertyChanging();
					this._TextWidth = value;
					this.SendPropertyChanged("TextWidth");
					this.OnTextWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextHeight", DbType="Int")]
		public System.Nullable<int> TextHeight
		{
			get
			{
				return this._TextHeight;
			}
			set
			{
				if ((this._TextHeight != value))
				{
					this.OnTextHeightChanging(value);
					this.SendPropertyChanging();
					this._TextHeight = value;
					this.SendPropertyChanged("TextHeight");
					this.OnTextHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStandard", DbType="Bit NOT NULL")]
		public bool IsStandard
		{
			get
			{
				return this._IsStandard;
			}
			set
			{
				if ((this._IsStandard != value))
				{
					this.OnIsStandardChanging(value);
					this.SendPropertyChanging();
					this._IsStandard = value;
					this.SendPropertyChanged("IsStandard");
					this.OnIsStandardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraphTypeID", DbType="Int")]
		public System.Nullable<int> GraphTypeID
		{
			get
			{
				return this._GraphTypeID;
			}
			set
			{
				if ((this._GraphTypeID != value))
				{
					this.OnGraphTypeIDChanging(value);
					this.SendPropertyChanging();
					this._GraphTypeID = value;
					this.SendPropertyChanged("GraphTypeID");
					this.OnGraphTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraphLabel", DbType="VarChar(50)")]
		public string GraphLabel
		{
			get
			{
				return this._GraphLabel;
			}
			set
			{
				if ((this._GraphLabel != value))
				{
					this.OnGraphLabelChanging(value);
					this.SendPropertyChanging();
					this._GraphLabel = value;
					this.SendPropertyChanged("GraphLabel");
					this.OnGraphLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidationOnWarning", DbType="NVarChar(4000)")]
		public string ValidationOnWarning
		{
			get
			{
				return this._ValidationOnWarning;
			}
			set
			{
				if ((this._ValidationOnWarning != value))
				{
					this.OnValidationOnWarningChanging(value);
					this.SendPropertyChanging();
					this._ValidationOnWarning = value;
					this.SendPropertyChanged("ValidationOnWarning");
					this.OnValidationOnWarningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidationOnEntry", DbType="NVarChar(4000)")]
		public string ValidationOnEntry
		{
			get
			{
				return this._ValidationOnEntry;
			}
			set
			{
				if ((this._ValidationOnEntry != value))
				{
					this.OnValidationOnEntryChanging(value);
					this.SendPropertyChanging();
					this._ValidationOnEntry = value;
					this.SendPropertyChanged("ValidationOnEntry");
					this.OnValidationOnEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckUnlikelyValue", DbType="Bit NOT NULL")]
		public bool CheckUnlikelyValue
		{
			get
			{
				return this._CheckUnlikelyValue;
			}
			set
			{
				if ((this._CheckUnlikelyValue != value))
				{
					this.OnCheckUnlikelyValueChanging(value);
					this.SendPropertyChanging();
					this._CheckUnlikelyValue = value;
					this.SendPropertyChanged("CheckUnlikelyValue");
					this.OnCheckUnlikelyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionOnImport_DELETED", DbType="Int")]
		public System.Nullable<int> PositionOnImport_DELETED
		{
			get
			{
				return this._PositionOnImport_DELETED;
			}
			set
			{
				if ((this._PositionOnImport_DELETED != value))
				{
					this.OnPositionOnImport_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._PositionOnImport_DELETED = value;
					this.SendPropertyChanged("PositionOnImport_DELETED");
					this.OnPositionOnImport_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Constant", DbType="VarChar(MAX)")]
		public string Constant
		{
			get
			{
				return this._Constant;
			}
			set
			{
				if ((this._Constant != value))
				{
					this.OnConstantChanging(value);
					this.SendPropertyChanging();
					this._Constant = value;
					this.SendPropertyChanged("Constant");
					this.OnConstantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Calculation", DbType="NVarChar(4000)")]
		public string Calculation
		{
			get
			{
				return this._Calculation;
			}
			set
			{
				if ((this._Calculation != value))
				{
					this.OnCalculationChanging(value);
					this.SendPropertyChanging();
					this._Calculation = value;
					this.SendPropertyChanged("Calculation");
					this.OnCalculationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowTotal", DbType="Bit NOT NULL")]
		public bool ShowTotal
		{
			get
			{
				return this._ShowTotal;
			}
			set
			{
				if ((this._ShowTotal != value))
				{
					this.OnShowTotalChanging(value);
					this.SendPropertyChanging();
					this._ShowTotal = value;
					this.SendPropertyChanged("ShowTotal");
					this.OnShowTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IgnoreSymbols", DbType="Bit NOT NULL")]
		public bool IgnoreSymbols
		{
			get
			{
				return this._IgnoreSymbols;
			}
			set
			{
				if ((this._IgnoreSymbols != value))
				{
					this.OnIgnoreSymbolsChanging(value);
					this.SendPropertyChanging();
					this._IgnoreSymbols = value;
					this.SendPropertyChanged("IgnoreSymbols");
					this.OnIgnoreSymbolsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRound", DbType="Bit NOT NULL")]
		public bool IsRound
		{
			get
			{
				return this._IsRound;
			}
			set
			{
				if ((this._IsRound != value))
				{
					this.OnIsRoundChanging(value);
					this.SendPropertyChanging();
					this._IsRound = value;
					this.SendPropertyChanged("IsRound");
					this.OnIsRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundNumber", DbType="Int NOT NULL")]
		public int RoundNumber
		{
			get
			{
				return this._RoundNumber;
			}
			set
			{
				if ((this._RoundNumber != value))
				{
					this.OnRoundNumberChanging(value);
					this.SendPropertyChanging();
					this._RoundNumber = value;
					this.SendPropertyChanged("RoundNumber");
					this.OnRoundNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DropdownValues", DbType="VarChar(MAX)")]
		public string DropdownValues
		{
			get
			{
				return this._DropdownValues;
			}
			set
			{
				if ((this._DropdownValues != value))
				{
					this.OnDropdownValuesChanging(value);
					this.SendPropertyChanging();
					this._DropdownValues = value;
					this.SendPropertyChanged("DropdownValues");
					this.OnDropdownValuesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberType", DbType="Int")]
		public System.Nullable<int> NumberType
		{
			get
			{
				return this._NumberType;
			}
			set
			{
				if ((this._NumberType != value))
				{
					this.OnNumberTypeChanging(value);
					this.SendPropertyChanging();
					this._NumberType = value;
					this.SendPropertyChanged("NumberType");
					this.OnNumberTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgColumnID", DbType="Int")]
		public System.Nullable<int> AvgColumnID
		{
			get
			{
				return this._AvgColumnID;
			}
			set
			{
				if ((this._AvgColumnID != value))
				{
					if (this._Column9.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAvgColumnIDChanging(value);
					this.SendPropertyChanging();
					this._AvgColumnID = value;
					this.SendPropertyChanged("AvgColumnID");
					this.OnAvgColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgNumberOfRecords", DbType="Int")]
		public System.Nullable<int> AvgNumberOfRecords
		{
			get
			{
				return this._AvgNumberOfRecords;
			}
			set
			{
				if ((this._AvgNumberOfRecords != value))
				{
					this.OnAvgNumberOfRecordsChanging(value);
					this.SendPropertyChanging();
					this._AvgNumberOfRecords = value;
					this.SendPropertyChanged("AvgNumberOfRecords");
					this.OnAvgNumberOfRecordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDateSingleColumn_DELETED", DbType="Bit NOT NULL")]
		public bool IsDateSingleColumn_DELETED
		{
			get
			{
				return this._IsDateSingleColumn_DELETED;
			}
			set
			{
				if ((this._IsDateSingleColumn_DELETED != value))
				{
					this.OnIsDateSingleColumn_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._IsDateSingleColumn_DELETED = value;
					this.SendPropertyChanged("IsDateSingleColumn_DELETED");
					this.OnIsDateSingleColumn_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowGraphExceedance", DbType="Decimal(18,10)")]
		public System.Nullable<decimal> ShowGraphExceedance
		{
			get
			{
				return this._ShowGraphExceedance;
			}
			set
			{
				if ((this._ShowGraphExceedance != value))
				{
					this.OnShowGraphExceedanceChanging(value);
					this.SendPropertyChanging();
					this._ShowGraphExceedance = value;
					this.SendPropertyChanged("ShowGraphExceedance");
					this.OnShowGraphExceedanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowGraphWarning", DbType="Decimal(18,10)")]
		public System.Nullable<decimal> ShowGraphWarning
		{
			get
			{
				return this._ShowGraphWarning;
			}
			set
			{
				if ((this._ShowGraphWarning != value))
				{
					this.OnShowGraphWarningChanging(value);
					this.SendPropertyChanging();
					this._ShowGraphWarning = value;
					this.SendPropertyChanged("ShowGraphWarning");
					this.OnShowGraphWarningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlatLineNumber", DbType="Int")]
		public System.Nullable<int> FlatLineNumber
		{
			get
			{
				return this._FlatLineNumber;
			}
			set
			{
				if ((this._FlatLineNumber != value))
				{
					this.OnFlatLineNumberChanging(value);
					this.SendPropertyChanging();
					this._FlatLineNumber = value;
					this.SendPropertyChanged("FlatLineNumber");
					this.OnFlatLineNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValueAt", DbType="Decimal(18,10)")]
		public System.Nullable<decimal> MaxValueAt
		{
			get
			{
				return this._MaxValueAt;
			}
			set
			{
				if ((this._MaxValueAt != value))
				{
					this.OnMaxValueAtChanging(value);
					this.SendPropertyChanging();
					this._MaxValueAt = value;
					this.SendPropertyChanged("MaxValueAt");
					this.OnMaxValueAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnType", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ColumnType
		{
			get
			{
				return this._ColumnType;
			}
			set
			{
				if ((this._ColumnType != value))
				{
					this.OnColumnTypeChanging(value);
					this.SendPropertyChanging();
					this._ColumnType = value;
					this.SendPropertyChanged("ColumnType");
					this.OnColumnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DropDownType", DbType="VarChar(15)")]
		public string DropDownType
		{
			get
			{
				return this._DropDownType;
			}
			set
			{
				if ((this._DropDownType != value))
				{
					this.OnDropDownTypeChanging(value);
					this.SendPropertyChanging();
					this._DropDownType = value;
					this.SendPropertyChanged("DropDownType");
					this.OnDropDownTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableTableID", DbType="Int")]
		public System.Nullable<int> TableTableID
		{
			get
			{
				return this._TableTableID;
			}
			set
			{
				if ((this._TableTableID != value))
				{
					this.OnTableTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableTableID = value;
					this.SendPropertyChanged("TableTableID");
					this.OnTableTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayColumn", DbType="VarChar(MAX)")]
		public string DisplayColumn
		{
			get
			{
				return this._DisplayColumn;
			}
			set
			{
				if ((this._DisplayColumn != value))
				{
					this.OnDisplayColumnChanging(value);
					this.SendPropertyChanging();
					this._DisplayColumn = value;
					this.SendPropertyChanged("DisplayColumn");
					this.OnDisplayColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SummaryCellBackColor", DbType="VarChar(50)")]
		public string SummaryCellBackColor
		{
			get
			{
				return this._SummaryCellBackColor;
			}
			set
			{
				if ((this._SummaryCellBackColor != value))
				{
					this.OnSummaryCellBackColorChanging(value);
					this.SendPropertyChanging();
					this._SummaryCellBackColor = value;
					this.SendPropertyChanged("SummaryCellBackColor");
					this.OnSummaryCellBackColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormVerticalPosition", DbType="Int")]
		public System.Nullable<int> FormVerticalPosition
		{
			get
			{
				return this._FormVerticalPosition;
			}
			set
			{
				if ((this._FormVerticalPosition != value))
				{
					this.OnFormVerticalPositionChanging(value);
					this.SendPropertyChanging();
					this._FormVerticalPosition = value;
					this.SendPropertyChanged("FormVerticalPosition");
					this.OnFormVerticalPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormHorizontalPosition", DbType="Int")]
		public System.Nullable<int> FormHorizontalPosition
		{
			get
			{
				return this._FormHorizontalPosition;
			}
			set
			{
				if ((this._FormHorizontalPosition != value))
				{
					this.OnFormHorizontalPositionChanging(value);
					this.SendPropertyChanging();
					this._FormHorizontalPosition = value;
					this.SendPropertyChanged("FormHorizontalPosition");
					this.OnFormHorizontalPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentColumnID", DbType="Int")]
		public System.Nullable<int> ParentColumnID
		{
			get
			{
				return this._ParentColumnID;
			}
			set
			{
				if ((this._ParentColumnID != value))
				{
					this.OnParentColumnIDChanging(value);
					this.SendPropertyChanging();
					this._ParentColumnID = value;
					this.SendPropertyChanged("ParentColumnID");
					this.OnParentColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextType", DbType="VarChar(50)")]
		public string TextType
		{
			get
			{
				return this._TextType;
			}
			set
			{
				if ((this._TextType != value))
				{
					this.OnTextTypeChanging(value);
					this.SendPropertyChanging();
					this._TextType = value;
					this.SendPropertyChanged("TextType");
					this.OnTextTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegEx", DbType="VarChar(MAX)")]
		public string RegEx
		{
			get
			{
				return this._RegEx;
			}
			set
			{
				if ((this._RegEx != value))
				{
					this.OnRegExChanging(value);
					this.SendPropertyChanging();
					this._RegEx = value;
					this.SendPropertyChanged("RegEx");
					this.OnRegExChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HideColumnID", DbType="Int")]
		public System.Nullable<int> HideColumnID
		{
			get
			{
				return this._HideColumnID;
			}
			set
			{
				if ((this._HideColumnID != value))
				{
					if (this._Column1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHideColumnIDChanging(value);
					this.SendPropertyChanging();
					this._HideColumnID = value;
					this.SendPropertyChanged("HideColumnID");
					this.OnHideColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HideColumnValue", DbType="NVarChar(250)")]
		public string HideColumnValue
		{
			get
			{
				return this._HideColumnValue;
			}
			set
			{
				if ((this._HideColumnValue != value))
				{
					this.OnHideColumnValueChanging(value);
					this.SendPropertyChanging();
					this._HideColumnValue = value;
					this.SendPropertyChanged("HideColumnValue");
					this.OnHideColumnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCalculationType", DbType="VarChar(15)")]
		public string DateCalculationType
		{
			get
			{
				return this._DateCalculationType;
			}
			set
			{
				if ((this._DateCalculationType != value))
				{
					this.OnDateCalculationTypeChanging(value);
					this.SendPropertyChanging();
					this._DateCalculationType = value;
					this.SendPropertyChanged("DateCalculationType");
					this.OnDateCalculationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnlyForAdmin", DbType="Int")]
		public System.Nullable<int> OnlyForAdmin
		{
			get
			{
				return this._OnlyForAdmin;
			}
			set
			{
				if ((this._OnlyForAdmin != value))
				{
					this.OnOnlyForAdminChanging(value);
					this.SendPropertyChanging();
					this._OnlyForAdmin = value;
					this.SendPropertyChanged("OnlyForAdmin");
					this.OnOnlyForAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemColumn", DbType="Bit NOT NULL")]
		public bool IsSystemColumn
		{
			get
			{
				return this._IsSystemColumn;
			}
			set
			{
				if ((this._IsSystemColumn != value))
				{
					this.OnIsSystemColumnChanging(value);
					this.SendPropertyChanging();
					this._IsSystemColumn = value;
					this.SendPropertyChanged("IsSystemColumn");
					this.OnIsSystemColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkedParentColumnID", DbType="Int")]
		public System.Nullable<int> LinkedParentColumnID
		{
			get
			{
				return this._LinkedParentColumnID;
			}
			set
			{
				if ((this._LinkedParentColumnID != value))
				{
					if (this._Column5.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkedParentColumnIDChanging(value);
					this.SendPropertyChanging();
					this._LinkedParentColumnID = value;
					this.SendPropertyChanged("LinkedParentColumnID");
					this.OnLinkedParentColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataRetrieverID", DbType="Int")]
		public System.Nullable<int> DataRetrieverID
		{
			get
			{
				return this._DataRetrieverID;
			}
			set
			{
				if ((this._DataRetrieverID != value))
				{
					this.OnDataRetrieverIDChanging(value);
					this.SendPropertyChanging();
					this._DataRetrieverID = value;
					this.SendPropertyChanged("DataRetrieverID");
					this.OnDataRetrieverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerticalList", DbType="Bit")]
		public System.Nullable<bool> VerticalList
		{
			get
			{
				return this._VerticalList;
			}
			set
			{
				if ((this._VerticalList != value))
				{
					this.OnVerticalListChanging(value);
					this.SendPropertyChanging();
					this._VerticalList = value;
					this.SendPropertyChanged("VerticalList");
					this.OnVerticalListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SummarySearch", DbType="Bit")]
		public System.Nullable<bool> SummarySearch
		{
			get
			{
				return this._SummarySearch;
			}
			set
			{
				if ((this._SummarySearch != value))
				{
					this.OnSummarySearchChanging(value);
					this.SendPropertyChanging();
					this._SummarySearch = value;
					this.SendPropertyChanged("SummarySearch");
					this.OnSummarySearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuickAddLink", DbType="Bit")]
		public System.Nullable<bool> QuickAddLink
		{
			get
			{
				return this._QuickAddLink;
			}
			set
			{
				if ((this._QuickAddLink != value))
				{
					this.OnQuickAddLinkChanging(value);
					this.SendPropertyChanging();
					this._QuickAddLink = value;
					this.SendPropertyChanged("QuickAddLink");
					this.OnQuickAddLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HideOperator", DbType="VarChar(25)")]
		public string HideOperator
		{
			get
			{
				return this._HideOperator;
			}
			set
			{
				if ((this._HideOperator != value))
				{
					this.OnHideOperatorChanging(value);
					this.SendPropertyChanging();
					this._HideOperator = value;
					this.SendPropertyChanged("HideOperator");
					this.OnHideOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculationIsActive", DbType="Bit")]
		public System.Nullable<bool> CalculationIsActive
		{
			get
			{
				return this._CalculationIsActive;
			}
			set
			{
				if ((this._CalculationIsActive != value))
				{
					this.OnCalculationIsActiveChanging(value);
					this.SendPropertyChanging();
					this._CalculationIsActive = value;
					this.SendPropertyChanged("CalculationIsActive");
					this.OnCalculationIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedUserID", DbType="Int")]
		public System.Nullable<int> LastUpdatedUserID
		{
			get
			{
				return this._LastUpdatedUserID;
			}
			set
			{
				if ((this._LastUpdatedUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastUpdatedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedUserID = value;
					this.SendPropertyChanged("LastUpdatedUserID");
					this.OnLastUpdatedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableTabID", DbType="Int")]
		public System.Nullable<int> TableTabID
		{
			get
			{
				return this._TableTabID;
			}
			set
			{
				if ((this._TableTabID != value))
				{
					this.OnTableTabIDChanging(value);
					this.SendPropertyChanging();
					this._TableTabID = value;
					this.SendPropertyChanged("TableTabID");
					this.OnTableTabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewName", DbType="VarChar(50)")]
		public string ViewName
		{
			get
			{
				return this._ViewName;
			}
			set
			{
				if ((this._ViewName != value))
				{
					this.OnViewNameChanging(value);
					this.SendPropertyChanging();
					this._ViewName = value;
					this.SendPropertyChanged("ViewName");
					this.OnViewNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPDefaultValue", DbType="VarChar(200)")]
		public string SPDefaultValue
		{
			get
			{
				return this._SPDefaultValue;
			}
			set
			{
				if ((this._SPDefaultValue != value))
				{
					this.OnSPDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._SPDefaultValue = value;
					this.SendPropertyChanged("SPDefaultValue");
					this.OnSPDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultType", DbType="VarChar(20)")]
		public string DefaultType
		{
			get
			{
				return this._DefaultType;
			}
			set
			{
				if ((this._DefaultType != value))
				{
					this.OnDefaultTypeChanging(value);
					this.SendPropertyChanging();
					this._DefaultType = value;
					this.SendPropertyChanged("DefaultType");
					this.OnDefaultTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultColumnID", DbType="Int")]
		public System.Nullable<int> DefaultColumnID
		{
			get
			{
				return this._DefaultColumnID;
			}
			set
			{
				if ((this._DefaultColumnID != value))
				{
					if (this._Column6.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultColumnIDChanging(value);
					this.SendPropertyChanging();
					this._DefaultColumnID = value;
					this.SendPropertyChanged("DefaultColumnID");
					this.OnDefaultColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowViewLink", DbType="VarChar(10)")]
		public string ShowViewLink
		{
			get
			{
				return this._ShowViewLink;
			}
			set
			{
				if ((this._ShowViewLink != value))
				{
					this.OnShowViewLinkChanging(value);
					this.SendPropertyChanging();
					this._ShowViewLink = value;
					this.SendPropertyChanged("ShowViewLink");
					this.OnShowViewLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterParentColumnID", DbType="Int")]
		public System.Nullable<int> FilterParentColumnID
		{
			get
			{
				return this._FilterParentColumnID;
			}
			set
			{
				if ((this._FilterParentColumnID != value))
				{
					if (this._Column8.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFilterParentColumnIDChanging(value);
					this.SendPropertyChanging();
					this._FilterParentColumnID = value;
					this.SendPropertyChanged("FilterParentColumnID");
					this.OnFilterParentColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterOtherColumnID", DbType="Int")]
		public System.Nullable<int> FilterOtherColumnID
		{
			get
			{
				return this._FilterOtherColumnID;
			}
			set
			{
				if ((this._FilterOtherColumnID != value))
				{
					if (this._Column7.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFilterOtherColumnIDChanging(value);
					this.SendPropertyChanging();
					this._FilterOtherColumnID = value;
					this.SendPropertyChanged("FilterOtherColumnID");
					this.OnFilterOtherColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterValue", DbType="VarChar(MAX)")]
		public string FilterValue
		{
			get
			{
				return this._FilterValue;
			}
			set
			{
				if ((this._FilterValue != value))
				{
					this.OnFilterValueChanging(value);
					this.SendPropertyChanging();
					this._FilterValue = value;
					this.SendPropertyChanged("FilterValue");
					this.OnFilterValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapPinHoverColumnID", DbType="Int")]
		public System.Nullable<int> MapPinHoverColumnID
		{
			get
			{
				return this._MapPinHoverColumnID;
			}
			set
			{
				if ((this._MapPinHoverColumnID != value))
				{
					if (this._Column3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapPinHoverColumnIDChanging(value);
					this.SendPropertyChanging();
					this._MapPinHoverColumnID = value;
					this.SendPropertyChanged("MapPinHoverColumnID");
					this.OnMapPinHoverColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompareColumnID", DbType="Int")]
		public System.Nullable<int> CompareColumnID
		{
			get
			{
				return this._CompareColumnID;
			}
			set
			{
				if ((this._CompareColumnID != value))
				{
					if (this._Column2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompareColumnIDChanging(value);
					this.SendPropertyChanging();
					this._CompareColumnID = value;
					this.SendPropertyChanged("CompareColumnID");
					this.OnCompareColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompareOperator", DbType="VarChar(50)")]
		public string CompareOperator
		{
			get
			{
				return this._CompareOperator;
			}
			set
			{
				if ((this._CompareOperator != value))
				{
					this.OnCompareOperatorChanging(value);
					this.SendPropertyChanging();
					this._CompareOperator = value;
					this.SendPropertyChanged("CompareOperator");
					this.OnCompareOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapPopup", DbType="VarChar(MAX)")]
		public string MapPopup
		{
			get
			{
				return this._MapPopup;
			}
			set
			{
				if ((this._MapPopup != value))
				{
					this.OnMapPopupChanging(value);
					this.SendPropertyChanging();
					this._MapPopup = value;
					this.SendPropertyChanged("MapPopup");
					this.OnMapPopupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrafficLightColumnID", DbType="Int")]
		public System.Nullable<int> TrafficLightColumnID
		{
			get
			{
				return this._TrafficLightColumnID;
			}
			set
			{
				if ((this._TrafficLightColumnID != value))
				{
					if (this._Column4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrafficLightColumnIDChanging(value);
					this.SendPropertyChanging();
					this._TrafficLightColumnID = value;
					this.SendPropertyChanged("TrafficLightColumnID");
					this.OnTrafficLightColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrafficLightValues", DbType="VarChar(MAX)")]
		public string TrafficLightValues
		{
			get
			{
				return this._TrafficLightValues;
			}
			set
			{
				if ((this._TrafficLightValues != value))
				{
					this.OnTrafficLightValuesChanging(value);
					this.SendPropertyChanging();
					this._TrafficLightValues = value;
					this.SendPropertyChanged("TrafficLightValues");
					this.OnTrafficLightValuesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultRelatedTableID", DbType="Int")]
		public System.Nullable<int> DefaultRelatedTableID
		{
			get
			{
				return this._DefaultRelatedTableID;
			}
			set
			{
				if ((this._DefaultRelatedTableID != value))
				{
					if (this._Table1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultRelatedTableIDChanging(value);
					this.SendPropertyChanging();
					this._DefaultRelatedTableID = value;
					this.SendPropertyChanged("DefaultRelatedTableID");
					this.OnDefaultRelatedTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultUpdateValues", DbType="Bit")]
		public System.Nullable<bool> DefaultUpdateValues
		{
			get
			{
				return this._DefaultUpdateValues;
			}
			set
			{
				if ((this._DefaultUpdateValues != value))
				{
					this.OnDefaultUpdateValuesChanging(value);
					this.SendPropertyChanging();
					this._DefaultUpdateValues = value;
					this.SendPropertyChanged("DefaultUpdateValues");
					this.OnDefaultUpdateValuesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidationCanIgnore", DbType="Bit")]
		public System.Nullable<bool> ValidationCanIgnore
		{
			get
			{
				return this._ValidationCanIgnore;
			}
			set
			{
				if ((this._ValidationCanIgnore != value))
				{
					this.OnValidationCanIgnoreChanging(value);
					this.SendPropertyChanging();
					this._ValidationCanIgnore = value;
					this.SendPropertyChanged("ValidationCanIgnore");
					this.OnValidationCanIgnoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultGraphDefinitionID", DbType="Int")]
		public System.Nullable<int> DefaultGraphDefinitionID
		{
			get
			{
				return this._DefaultGraphDefinitionID;
			}
			set
			{
				if ((this._DefaultGraphDefinitionID != value))
				{
					this.OnDefaultGraphDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._DefaultGraphDefinitionID = value;
					this.SendPropertyChanged("DefaultGraphDefinitionID");
					this.OnDefaultGraphDefinitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageOnSummary", DbType="Bit")]
		public System.Nullable<bool> ImageOnSummary
		{
			get
			{
				return this._ImageOnSummary;
			}
			set
			{
				if ((this._ImageOnSummary != value))
				{
					this.OnImageOnSummaryChanging(value);
					this.SendPropertyChanging();
					this._ImageOnSummary = value;
					this.SendPropertyChanged("ImageOnSummary");
					this.OnImageOnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowCopy", DbType="Bit")]
		public System.Nullable<bool> AllowCopy
		{
			get
			{
				return this._AllowCopy;
			}
			set
			{
				if ((this._AllowCopy != value))
				{
					this.OnAllowCopyChanging(value);
					this.SendPropertyChanging();
					this._AllowCopy = value;
					this.SendPropertyChanged("AllowCopy");
					this.OnAllowCopyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidationOnExceedance", DbType="NVarChar(4000)")]
		public string ValidationOnExceedance
		{
			get
			{
				return this._ValidationOnExceedance;
			}
			set
			{
				if ((this._ValidationOnExceedance != value))
				{
					this.OnValidationOnExceedanceChanging(value);
					this.SendPropertyChanging();
					this._ValidationOnExceedance = value;
					this.SendPropertyChanged("ValidationOnExceedance");
					this.OnValidationOnExceedanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColourCells", DbType="Bit")]
		public System.Nullable<bool> ColourCells
		{
			get
			{
				return this._ColourCells;
			}
			set
			{
				if ((this._ColourCells != value))
				{
					this.OnColourCellsChanging(value);
					this.SendPropertyChanging();
					this._ColourCells = value;
					this.SendPropertyChanged("ColourCells");
					this.OnColourCellsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldJoinColumn", DbType="Int")]
		public System.Nullable<int> OldJoinColumn
		{
			get
			{
				return this._OldJoinColumn;
			}
			set
			{
				if ((this._OldJoinColumn != value))
				{
					this.OnOldJoinColumnChanging(value);
					this.SendPropertyChanging();
					this._OldJoinColumn = value;
					this.SendPropertyChanged("OldJoinColumn");
					this.OnOldJoinColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewJoinColumn", DbType="Int")]
		public System.Nullable<int> NewJoinColumn
		{
			get
			{
				return this._NewJoinColumn;
			}
			set
			{
				if ((this._NewJoinColumn != value))
				{
					this.OnNewJoinColumnChanging(value);
					this.SendPropertyChanging();
					this._NewJoinColumn = value;
					this.SendPropertyChanged("NewJoinColumn");
					this.OnNewJoinColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ButtonInfo", DbType="VarChar(1000)")]
		public string ButtonInfo
		{
			get
			{
				return this._ButtonInfo;
			}
			set
			{
				if ((this._ButtonInfo != value))
				{
					this.OnButtonInfoChanging(value);
					this.SendPropertyChanging();
					this._ButtonInfo = value;
					this.SendPropertyChanged("ButtonInfo");
					this.OnButtonInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterOperator", DbType="VarChar(25)")]
		public string FilterOperator
		{
			get
			{
				return this._FilterOperator;
			}
			set
			{
				if ((this._FilterOperator != value))
				{
					this.OnFilterOperatorChanging(value);
					this.SendPropertyChanging();
					this._FilterOperator = value;
					this.SendPropertyChanged("FilterOperator");
					this.OnFilterOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Importance", DbType="Char(1)")]
		public System.Nullable<char> Importance
		{
			get
			{
				return this._Importance;
			}
			set
			{
				if ((this._Importance != value))
				{
					this.OnImportanceChanging(value);
					this.SendPropertyChanging();
					this._Importance = value;
					this.SendPropertyChanged("Importance");
					this.OnImportanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table", Storage="_Tables", ThisKey="ColumnID", OtherKey="FilterColumnID")]
		public EntitySet<Table> Tables
		{
			get
			{
				return this._Tables;
			}
			set
			{
				this._Tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table1", Storage="_Tables1", ThisKey="ColumnID", OtherKey="AddUserUserColumnID")]
		public EntitySet<Table> Tables1
		{
			get
			{
				return this._Tables1;
			}
			set
			{
				this._Tables1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table2", Storage="_Tables2", ThisKey="ColumnID", OtherKey="DataUpdateUniqueColumnID")]
		public EntitySet<Table> Tables2
		{
			get
			{
				return this._Tables2;
			}
			set
			{
				this._Tables2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table3", Storage="_Tables3", ThisKey="ColumnID", OtherKey="GraphDefaultYAxisColumnID")]
		public EntitySet<Table> Tables3
		{
			get
			{
				return this._Tables3;
			}
			set
			{
				this._Tables3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table4", Storage="_Tables4", ThisKey="ColumnID", OtherKey="UniqueColumnID")]
		public EntitySet<Table> Tables4
		{
			get
			{
				return this._Tables4;
			}
			set
			{
				this._Tables4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table5", Storage="_Tables5", ThisKey="ColumnID", OtherKey="UniqueColumnID2")]
		public EntitySet<Table> Tables5
		{
			get
			{
				return this._Tables5;
			}
			set
			{
				this._Tables5.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table6", Storage="_Tables6", ThisKey="ColumnID", OtherKey="AddUserPasswordColumnID")]
		public EntitySet<Table> Tables6
		{
			get
			{
				return this._Tables6;
			}
			set
			{
				this._Tables6.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table7", Storage="_Tables7", ThisKey="ColumnID", OtherKey="SortColumnID")]
		public EntitySet<Table> Tables7
		{
			get
			{
				return this._Tables7;
			}
			set
			{
				this._Tables7.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table8", Storage="_Tables8", ThisKey="ColumnID", OtherKey="GraphSeriesColumnID")]
		public EntitySet<Table> Tables8
		{
			get
			{
				return this._Tables8;
			}
			set
			{
				this._Tables8.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table9", Storage="_Tables9", ThisKey="ColumnID", OtherKey="GraphXAxisColumnID")]
		public EntitySet<Table> Tables9
		{
			get
			{
				return this._Tables9;
			}
			set
			{
				this._Tables9.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table10", Storage="_Tables10", ThisKey="ColumnID", OtherKey="ValidateColumnID1")]
		public EntitySet<Table> Tables10
		{
			get
			{
				return this._Tables10;
			}
			set
			{
				this._Tables10.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Table11", Storage="_Tables11", ThisKey="ColumnID", OtherKey="ValidateColumnID2")]
		public EntitySet<Table> Tables11
		{
			get
			{
				return this._Tables11;
			}
			set
			{
				this._Tables11.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column", Storage="_Columns", ThisKey="ColumnID", OtherKey="HideColumnID")]
		public EntitySet<Column> Columns
		{
			get
			{
				return this._Columns;
			}
			set
			{
				this._Columns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column1", Storage="_Columns1", ThisKey="ColumnID", OtherKey="CompareColumnID")]
		public EntitySet<Column> Columns1
		{
			get
			{
				return this._Columns1;
			}
			set
			{
				this._Columns1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column2", Storage="_Columns2", ThisKey="ColumnID", OtherKey="MapPinHoverColumnID")]
		public EntitySet<Column> Columns2
		{
			get
			{
				return this._Columns2;
			}
			set
			{
				this._Columns2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column3", Storage="_Columns3", ThisKey="ColumnID", OtherKey="TrafficLightColumnID")]
		public EntitySet<Column> Columns3
		{
			get
			{
				return this._Columns3;
			}
			set
			{
				this._Columns3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column4", Storage="_Columns4", ThisKey="ColumnID", OtherKey="LinkedParentColumnID")]
		public EntitySet<Column> Columns4
		{
			get
			{
				return this._Columns4;
			}
			set
			{
				this._Columns4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column5", Storage="_Columns5", ThisKey="ColumnID", OtherKey="DefaultColumnID")]
		public EntitySet<Column> Columns5
		{
			get
			{
				return this._Columns5;
			}
			set
			{
				this._Columns5.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column6", Storage="_Columns6", ThisKey="ColumnID", OtherKey="FilterOtherColumnID")]
		public EntitySet<Column> Columns6
		{
			get
			{
				return this._Columns6;
			}
			set
			{
				this._Columns6.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column7", Storage="_Columns7", ThisKey="ColumnID", OtherKey="FilterParentColumnID")]
		public EntitySet<Column> Columns7
		{
			get
			{
				return this._Columns7;
			}
			set
			{
				this._Columns7.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column8", Storage="_Columns8", ThisKey="ColumnID", OtherKey="AvgColumnID")]
		public EntitySet<Column> Columns8
		{
			get
			{
				return this._Columns8;
			}
			set
			{
				this._Columns8.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column", Storage="_Column1", ThisKey="HideColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column1
		{
			get
			{
				return this._Column1.Entity;
			}
			set
			{
				Column previousValue = this._Column1.Entity;
				if (((previousValue != value) 
							|| (this._Column1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column1.Entity = null;
						previousValue.Columns.Remove(this);
					}
					this._Column1.Entity = value;
					if ((value != null))
					{
						value.Columns.Add(this);
						this._HideColumnID = value.ColumnID;
					}
					else
					{
						this._HideColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column1", Storage="_Column2", ThisKey="CompareColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column2
		{
			get
			{
				return this._Column2.Entity;
			}
			set
			{
				Column previousValue = this._Column2.Entity;
				if (((previousValue != value) 
							|| (this._Column2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column2.Entity = null;
						previousValue.Columns1.Remove(this);
					}
					this._Column2.Entity = value;
					if ((value != null))
					{
						value.Columns1.Add(this);
						this._CompareColumnID = value.ColumnID;
					}
					else
					{
						this._CompareColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column2", Storage="_Column3", ThisKey="MapPinHoverColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column3
		{
			get
			{
				return this._Column3.Entity;
			}
			set
			{
				Column previousValue = this._Column3.Entity;
				if (((previousValue != value) 
							|| (this._Column3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column3.Entity = null;
						previousValue.Columns2.Remove(this);
					}
					this._Column3.Entity = value;
					if ((value != null))
					{
						value.Columns2.Add(this);
						this._MapPinHoverColumnID = value.ColumnID;
					}
					else
					{
						this._MapPinHoverColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column3", Storage="_Column4", ThisKey="TrafficLightColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column4
		{
			get
			{
				return this._Column4.Entity;
			}
			set
			{
				Column previousValue = this._Column4.Entity;
				if (((previousValue != value) 
							|| (this._Column4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column4.Entity = null;
						previousValue.Columns3.Remove(this);
					}
					this._Column4.Entity = value;
					if ((value != null))
					{
						value.Columns3.Add(this);
						this._TrafficLightColumnID = value.ColumnID;
					}
					else
					{
						this._TrafficLightColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column4");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column4", Storage="_Column5", ThisKey="LinkedParentColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column5
		{
			get
			{
				return this._Column5.Entity;
			}
			set
			{
				Column previousValue = this._Column5.Entity;
				if (((previousValue != value) 
							|| (this._Column5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column5.Entity = null;
						previousValue.Columns4.Remove(this);
					}
					this._Column5.Entity = value;
					if ((value != null))
					{
						value.Columns4.Add(this);
						this._LinkedParentColumnID = value.ColumnID;
					}
					else
					{
						this._LinkedParentColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column5");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column5", Storage="_Column6", ThisKey="DefaultColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column6
		{
			get
			{
				return this._Column6.Entity;
			}
			set
			{
				Column previousValue = this._Column6.Entity;
				if (((previousValue != value) 
							|| (this._Column6.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column6.Entity = null;
						previousValue.Columns5.Remove(this);
					}
					this._Column6.Entity = value;
					if ((value != null))
					{
						value.Columns5.Add(this);
						this._DefaultColumnID = value.ColumnID;
					}
					else
					{
						this._DefaultColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column6");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column6", Storage="_Column7", ThisKey="FilterOtherColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column7
		{
			get
			{
				return this._Column7.Entity;
			}
			set
			{
				Column previousValue = this._Column7.Entity;
				if (((previousValue != value) 
							|| (this._Column7.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column7.Entity = null;
						previousValue.Columns6.Remove(this);
					}
					this._Column7.Entity = value;
					if ((value != null))
					{
						value.Columns6.Add(this);
						this._FilterOtherColumnID = value.ColumnID;
					}
					else
					{
						this._FilterOtherColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column7");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column7", Storage="_Column8", ThisKey="FilterParentColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column8
		{
			get
			{
				return this._Column8.Entity;
			}
			set
			{
				Column previousValue = this._Column8.Entity;
				if (((previousValue != value) 
							|| (this._Column8.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column8.Entity = null;
						previousValue.Columns7.Remove(this);
					}
					this._Column8.Entity = value;
					if ((value != null))
					{
						value.Columns7.Add(this);
						this._FilterParentColumnID = value.ColumnID;
					}
					else
					{
						this._FilterParentColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column8");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Column_Column8", Storage="_Column9", ThisKey="AvgColumnID", OtherKey="ColumnID", IsForeignKey=true)]
		public Column Column9
		{
			get
			{
				return this._Column9.Entity;
			}
			set
			{
				Column previousValue = this._Column9.Entity;
				if (((previousValue != value) 
							|| (this._Column9.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Column9.Entity = null;
						previousValue.Columns8.Remove(this);
					}
					this._Column9.Entity = value;
					if ((value != null))
					{
						value.Columns8.Add(this);
						this._AvgColumnID = value.ColumnID;
					}
					else
					{
						this._AvgColumnID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Column9");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Column", Storage="_Table", ThisKey="TableID", OtherKey="TableID", IsForeignKey=true)]
		public Table Table
		{
			get
			{
				return this._Table.Entity;
			}
			set
			{
				Table previousValue = this._Table.Entity;
				if (((previousValue != value) 
							|| (this._Table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table.Entity = null;
						previousValue.Columns.Remove(this);
					}
					this._Table.Entity = value;
					if ((value != null))
					{
						value.Columns.Add(this);
						this._TableID = value.TableID;
					}
					else
					{
						this._TableID = default(int);
					}
					this.SendPropertyChanged("Table");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Column1", Storage="_Table1", ThisKey="DefaultRelatedTableID", OtherKey="TableID", IsForeignKey=true)]
		public Table Table1
		{
			get
			{
				return this._Table1.Entity;
			}
			set
			{
				Table previousValue = this._Table1.Entity;
				if (((previousValue != value) 
							|| (this._Table1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table1.Entity = null;
						previousValue.Columns1.Remove(this);
					}
					this._Table1.Entity = value;
					if ((value != null))
					{
						value.Columns1.Add(this);
						this._DefaultRelatedTableID = value.TableID;
					}
					else
					{
						this._DefaultRelatedTableID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Table1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Column", Storage="_User", ThisKey="LastUpdatedUserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Columns.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Columns.Add(this);
						this._LastUpdatedUserID = value.UserID;
					}
					else
					{
						this._LastUpdatedUserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column = this;
		}
		
		private void detach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column = null;
		}
		
		private void attach_Tables1(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column1 = this;
		}
		
		private void detach_Tables1(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column1 = null;
		}
		
		private void attach_Tables2(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column2 = this;
		}
		
		private void detach_Tables2(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column2 = null;
		}
		
		private void attach_Tables3(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column3 = this;
		}
		
		private void detach_Tables3(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column3 = null;
		}
		
		private void attach_Tables4(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column4 = this;
		}
		
		private void detach_Tables4(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column4 = null;
		}
		
		private void attach_Tables5(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column5 = this;
		}
		
		private void detach_Tables5(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column5 = null;
		}
		
		private void attach_Tables6(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column6 = this;
		}
		
		private void detach_Tables6(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column6 = null;
		}
		
		private void attach_Tables7(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column7 = this;
		}
		
		private void detach_Tables7(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column7 = null;
		}
		
		private void attach_Tables8(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column8 = this;
		}
		
		private void detach_Tables8(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column8 = null;
		}
		
		private void attach_Tables9(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column9 = this;
		}
		
		private void detach_Tables9(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column9 = null;
		}
		
		private void attach_Tables10(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column10 = this;
		}
		
		private void detach_Tables10(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column10 = null;
		}
		
		private void attach_Tables11(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column11 = this;
		}
		
		private void detach_Tables11(Table entity)
		{
			this.SendPropertyChanging();
			entity.Column11 = null;
		}
		
		private void attach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column1 = this;
		}
		
		private void detach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column1 = null;
		}
		
		private void attach_Columns1(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column2 = this;
		}
		
		private void detach_Columns1(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column2 = null;
		}
		
		private void attach_Columns2(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column3 = this;
		}
		
		private void detach_Columns2(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column3 = null;
		}
		
		private void attach_Columns3(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column4 = this;
		}
		
		private void detach_Columns3(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column4 = null;
		}
		
		private void attach_Columns4(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column5 = this;
		}
		
		private void detach_Columns4(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column5 = null;
		}
		
		private void attach_Columns5(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column6 = this;
		}
		
		private void detach_Columns5(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column6 = null;
		}
		
		private void attach_Columns6(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column7 = this;
		}
		
		private void detach_Columns6(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column7 = null;
		}
		
		private void attach_Columns7(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column8 = this;
		}
		
		private void detach_Columns7(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column8 = null;
		}
		
		private void attach_Columns8(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column9 = this;
		}
		
		private void detach_Columns8(Column entity)
		{
			this.SendPropertyChanging();
			entity.Column9 = null;
		}
	}
}
#pragma warning restore 1591
